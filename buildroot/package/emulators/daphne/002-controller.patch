Improve joystick support:
- Support not only first joystick
- No more limit on button number
- Allow mapping of axis for joystick movement

Signed-off-by: Laurent Merckx <laurent-merckx@skynet.be>

--- a/src/io/input.cpp	2017-11-02 17:41:39.000000000 +0100
+++ b/src/io/input.cpp	2018-07-07 11:43:19.568545916 +0200
@@ -54,7 +54,6 @@ using namespace std;
 const int JOY_AXIS_MID = (int)(32768 * (0.75)); // how far they have to move the
                                                 // joystick before it 'grabs'
 
-SDL_Joystick *G_joystick = NULL;  // pointer to joystick object
 bool g_use_joystick      = true;  // use a joystick by default
 bool g_alt_pressed       = false; // whether the ALT key is presssed (for ALT-Enter
                                   // combo)
@@ -143,8 +164,8 @@ void CFG_Keys()
 {
     struct mpo_io *io;
     string cur_line = "";
-    string key_name = "", sval1 = "", sval2 = "", sval3 = "", eq_sign = "";
-    int val1 = 0, val2 = 0, val3 = 0;
+    string key_name = "", sval1 = "", sval2 = "", sval3 = "", sval4 = "", eq_sign = "";
+    int val1 = 0, val2 = 0, val3 = 0, val4 = 0;
     //	bool done = false;
 
     // find where the hypinput ini file is (if the file doesn't exist, this
@@ -188,6 +209,10 @@ void CFG_Keys()
                                     val1         = atoi(sval1.c_str());
                                     val2         = atoi(sval2.c_str());
                                     val3         = atoi(sval3.c_str());
+                                    val4         = 0;
+                                    if (find_word(cur_line.c_str(), sval4, cur_line)) {
+                                       val4         = atoi(sval4.c_str());
+                                    }
                                     corrupt_file = false; // looks like we're
                                                           // good
 
@@ -263,20 +299,17 @@ int SDL_input_init()
     if (SDL_InitSubSystem(SDL_INIT_JOYSTICK) >= 0) {
         // if joystick usage is enabled
         if (g_use_joystick) {
-            // if there is at least 1 joystick and we are authorized to use the
-            // joystick for input
-            if (SDL_NumJoysticks() > 0) {
-                G_joystick = SDL_JoystickOpen(0); // FIXME: right now we
-                                                  // automatically choose the
-                                                  // first joystick
-                if (G_joystick != NULL) {
-                    LOGD << "Joystick #0 was successfully opened";
+            // open joysticks
+            for (int i=0; i < SDL_NumJoysticks(); i++) {
+                SDL_Joystick* joystick = SDL_JoystickOpen(i);
+                if (joystick != NULL) {
+                    LOGD << "Joystick #" << i << " was successfully opened";
                 } else {
-                    LOGW << "Error opening joystick!";
+                    LOGW << "Error opening joystick #" << i << "!";
                 }
-            } else {
-                LOGI << "No joysticks detected";
             }
+            if (SDL_NumJoysticks() == 0)
+                LOGI << "No joysticks detected";
         }
         // notify user that their attempt to disable the joystick is successful
         else {
@@ -459,11 +492,10 @@ void process_event(SDL_Event *event)
     case SDL_JOYBUTTONDOWN:
         reset_idle(); // added by JFA for -idleexit
 
-        // added by Russ
-        // loop through buttons and look for a press
-        for (i = 0; i < (sizeof(joystick_buttons_map) / sizeof(int)); i++) {
-            if (event->jbutton.button == i) {
-                input_enable((Uint8)joystick_buttons_map[i]);
+        // loop through map and find corresponding action
+        for (i = 0; i < SWITCH_COUNT; i++) {
+            if (event->jbutton.which == g_joy_btn_defs[i][0] && event->jbutton.button == g_joy_btn_defs[i][1]-1) {
+                input_enable(i);
                 break;
             }
         }
@@ -472,10 +504,10 @@ void process_event(SDL_Event *event)
     case SDL_JOYBUTTONUP:
         reset_idle(); // added by JFA for -idleexit
 
-        // added by Russ
-        for (i = 0; i < (sizeof(joystick_buttons_map) / sizeof(int)); i++) {
-            if (event->jbutton.button == i) {
-                input_disable((Uint8)joystick_buttons_map[i]);
+        // loop through map and find corresponding action
+        for (i = 0; i < SWITCH_COUNT; i++) {
+            if (event->jbutton.which == g_joy_btn_defs[i][0] && event->jbutton.button == g_joy_btn_defs[i][1]-1) {
+                input_disable(i);
                 break;
             }
         }
@@ -562,50 +594,37 @@ void process_keyup(SDL_Keycode key)
 // processes movements of the joystick
 void process_joystick_motion(SDL_Event *event)
 {
+    static int x_axis_in_use = 0;
+    static int y_axis_in_use = 0;
 
-    static int x_axis_in_use = 0; // true if joystick is left or right
-    static int y_axis_in_use = 0; // true if joystick is up or down
-
-    // if they are moving along the verticle axis
-    if (event->jaxis.axis == 1) {
-        // if they're moving up
-        if (event->jaxis.value < -JOY_AXIS_MID) {
-            input_enable(SWITCH_UP);
-            y_axis_in_use = 1;
-        }
-        // if they're moving down
-        else if (event->jaxis.value > JOY_AXIS_MID) {
-            input_enable(SWITCH_DOWN);
+    // loop through map and find corresponding action
+    int key = -1;
+    for (int i = 0; i < SWITCH_START1; i++) {
+        if (event->jaxis.which == g_joy_axs_defs[i][0] && event->jaxis.axis == g_joy_axs_defs[i][1]-1 && ((event->jaxis.value < 0)?-1:1) == g_joy_axs_defs[i][2]) {
+            key = i;
+            break;
+        }
+    }
+    if (key == -1) return;
+
+    if (abs(event->jaxis.value) > JOY_AXIS_MID) {
+        input_enable(key);
+        if (key == SWITCH_UP || key == SWITCH_DOWN)
             y_axis_in_use = 1;
-        }
-
-        // if they just barely stopped moving up or down
-        else if (y_axis_in_use == 1) {
+        else 
+            x_axis_in_use = 1;
+    }
+    else {
+        if ((key == SWITCH_UP || key == SWITCH_DOWN) && y_axis_in_use) {
             input_disable(SWITCH_UP);
             input_disable(SWITCH_DOWN);
             y_axis_in_use = 0;
-        }
-    } // end verticle axis
-
-    // horizontal axis
-    else {
-        // if they're moving right
-        if (event->jaxis.value > JOY_AXIS_MID) {
-            input_enable(SWITCH_RIGHT);
-            x_axis_in_use = 1;
-        }
-        // if they're moving left
-        else if (event->jaxis.value < -JOY_AXIS_MID) {
-            input_enable(SWITCH_LEFT);
-            x_axis_in_use = 1;
-        }
-        // if they just barely stopped moving right or left
-        else if (x_axis_in_use == 1) {
-            input_disable(SWITCH_RIGHT);
+        } else if ((key == SWITCH_LEFT || key == SWITCH_RIGHT) && x_axis_in_use) {
             input_disable(SWITCH_LEFT);
+            input_disable(SWITCH_RIGHT);
             x_axis_in_use = 0;
         }
-    } // end horizontal axis
+    }
 }
 
 // processes movement of the joystick hat
