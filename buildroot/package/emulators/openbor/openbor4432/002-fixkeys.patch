diff --git a/openbor.c b/openbor.c
index cc2a0d4..5437d72 100644
--- a/openbor.c
+++ b/openbor.c
@@ -18,6 +18,7 @@
 #include "soundmix.h"
 
 #define NaN 0xAAAAAAAA
+#define		MAX_BUFFER_LEN		512
 
 static const char *E_OUT_OF_MEMORY = "Error: Could not allocate sufficient memory.\n";
 static int DEFAULT_OFFSCREEN_KILL = 3000;
@@ -2959,7 +2960,7 @@ void clearsettings()
     savedata.logo = 0;
     savedata.uselog = 1;
     savedata.debuginfo = 0;
-    savedata.fullscreen = 0;
+    savedata.fullscreen = 1; // FCA : default to fullscreen
     savedata.stretch = 0;
 
 
@@ -3053,6 +3054,7 @@ void clearsettings()
 
 void savesettings()
 {
+    saveasdefault(); return;  // FCA : disable per game settings
 #ifndef DC
     FILE *handle = NULL;
     char path[128] = {""};
@@ -3070,8 +3072,174 @@ void savesettings()
 #endif
 }
 
+// FCA
+void saveToIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if !WIN
+	strcpy(path, "/userdata/system/configs/openbor/config4432.ini");
+	handle = fopen(path, "wb");
+#endif
+
+	if (handle == NULL)
+	{
+		strcat(path, "./config.ini");
+		handle = fopen(path, "wb");
+	}
+		
+	if (handle == NULL)
+		return;
+	
+	fprintf(handle, "gamma=%i\n", savedata.gamma);
+	fprintf(handle, "brightness=%i\n", savedata.brightness);
+	fprintf(handle, "soundvol=%i\n", savedata.soundvol);
+	fprintf(handle, "usemusic=%i\n", savedata.usemusic);
+	fprintf(handle, "musicvol=%i\n", savedata.musicvol);
+	fprintf(handle, "effectvol=%i\n", savedata.effectvol);
+	fprintf(handle, "usejoy=%i\n", savedata.usejoy);
+	fprintf(handle, "mode=%i\n", savedata.mode);
+	fprintf(handle, "windowpos=%i\n", savedata.windowpos);
+	fprintf(handle, "showtitles=%i\n", savedata.showtitles);
+	fprintf(handle, "videoNTSC=%i\n", savedata.videoNTSC);
+	fprintf(handle, "swfilter=%i\n", savedata.swfilter);
+	fprintf(handle, "logo=%i\n", savedata.logo);
+	fprintf(handle, "uselog=%i\n", savedata.uselog);
+	fprintf(handle, "debuginfo=%i\n", savedata.debuginfo);
+	fprintf(handle, "fullscreen=%i\n", savedata.fullscreen);
+	fprintf(handle, "stretch=%i\n", savedata.stretch);
+#if SDL
+	fprintf(handle, "usegl=%i\n", savedata.usegl);
+
+#ifndef ANDROID
+	if (strcmp(savesDir, "Saves") != 0)
+		fprintf(handle, "savesDir=%s\n", savesDir);
+	
+	if (strcmp(screenShotsDir, "ScreenShots") != 0)
+		fprintf(handle, "screenShotsDir=%s\n", screenShotsDir);
+#endif
+
+#endif
+	
+	char tmp[255];
+	
+	for (int i = 0; i < MAX_PLAYERS; i++)
+	{
+		for (int j = 0; j < MAX_BTN_NUM; j++)
+		{
+			sprintf(tmp, "keys.%i.%i=%i\n", i, j, savedata.keys[i][j]);
+			fprintf(handle, tmp);
+		}
+	}
+
+	fclose(handle);
+}
+
+bool loadfromIni()
+{
+	FILE *handle = NULL;
+	char path[MAX_BUFFER_LEN] = { "" };
+
+#if !WIN
+	strcpy(path, "/userdata/system/configs/openbor/config4432.ini");
+	handle = fopen(path, "rb");
+#endif
+
+	if (handle == NULL)
+	{
+		strcat(path, "./config.ini");
+		handle = fopen(path, "rb");
+	}
+	
+	if (handle != NULL)
+	{
+		char line[1024] = "";
+		clearsettings();
+		
+		while (fgets(line, 1024, handle))
+		{
+			strtok(line, "\n");
+
+			char* pch = strstr(line, "=");
+			if (pch != NULL)
+			{
+				char key[1024] = "";
+				char value[1024] = "";
+
+				strncpy(key, line, pch - line);
+				strcpy(value, pch + 1);
+
+				if (strcmp(key, "gamma") == 0)
+					savedata.gamma = atoi(value);
+				if (strcmp(key, "brightness") == 0)
+					savedata.brightness = atoi(value);
+				if (strcmp(key, "soundvol") == 0)
+					savedata.soundvol = atoi(value);
+				if (strcmp(key, "usemusic") == 0)
+					savedata.usemusic = atoi(value);
+				if (strcmp(key, "musicvol") == 0)
+					savedata.musicvol = atoi(value);
+				if (strcmp(key, "effectvol") == 0)
+					savedata.effectvol = atoi(value);
+				if (strcmp(key, "usejoy") == 0)
+					savedata.usejoy = atoi(value);
+				if (strcmp(key, "mode") == 0)
+					savedata.mode = atoi(value);
+				if (strcmp(key, "windowpos") == 0)
+					savedata.windowpos = atoi(value);
+				if (strcmp(key, "showtitles") == 0)
+					savedata.showtitles = atoi(value);
+				if (strcmp(key, "videoNTSC") == 0)
+					savedata.videoNTSC = atoi(value);
+				if (strcmp(key, "swfilter") == 0)
+					savedata.swfilter = atoi(value);
+				if (strcmp(key, "logo") == 0)
+					savedata.logo = atoi(value);
+				if (strcmp(key, "uselog") == 0)
+					savedata.uselog = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "debuginfo") == 0)
+					savedata.debuginfo = atoi(value);
+				if (strcmp(key, "fullscreen") == 0)
+					savedata.fullscreen = atoi(value);
+				if (strcmp(key, "stretch") == 0)
+					savedata.stretch = atoi(value);
+#if SDL
+				if (strcmp(key, "usegl") == 0)
+					savedata.usegl[1] = atoi(value);
+
+				if (strcmp(key, "savesDir") == 0)
+					strcpy(savesDir, value);
+				if (strcmp(key, "screenShotsDir") == 0)
+					strcpy(screenShotsDir, value);					
+#endif
+
+				char tmp[255];
+				for (int i = 0; i < MAX_PLAYERS; i++)
+				{
+					for (int j = 0; j < MAX_BTN_NUM; j++)
+					{
+						sprintf(tmp, "keys.%i.%i", i, j);
+						if (strcmp(key, tmp) == 0)
+							savedata.keys[i][j] = atoi(value);
+					}
+				}
+			}
+		}
+
+		fclose(handle);
+		return true;
+	}
+
+	return false;
+}
+//FCA 
+
 void saveasdefault()
 {
+    saveToIni(); return; // FCA
 #ifndef DC
     FILE *handle = NULL;
     char path[128] = {""};
@@ -3090,6 +3258,8 @@ void saveasdefault()
 
 void loadsettings()
 {
+    loadfromdefault(); return; // FCA : disable per game settings
+
 #ifndef DC
     FILE *handle = NULL;
     char path[128] = {""};
@@ -3121,6 +3291,8 @@ void loadsettings()
 
 void loadfromdefault()
 {
+    if (loadfromIni()) return; // FCA
+
 #ifndef DC
     FILE *handle = NULL;
     char path[128] = {""};
@@ -3128,16 +3300,16 @@ void loadfromdefault()
     strncat(path, "default.cfg", 128);
     clearsettings();
     handle = fopen(path, "rb");
-    if(handle == NULL)
-    {
-        return;
-    }
-    fread(&savedata, 1, sizeof(savedata), handle);
-    fclose(handle);
-    if(savedata.compatibleversion != COMPATIBLEVERSION)
-    {
-        clearsettings();
-    }
+    if (handle != NULL)
+      {
+	fread(&savedata, 1, sizeof(savedata), handle);
+	fclose(handle);
+      }
+
+    if (savedata.compatibleversion != COMPATIBLEVERSION)
+      {
+	clearsettings();
+      }
 #else
     clearsettings();
 #endif
@@ -31355,6 +31527,8 @@ void inputrefresh(int playrecmode)
         bothnewkeys |= player[p].newkeys;
     }
 
+    if((bothkeys & (FLAG_START + FLAG_ESC)) == FLAG_START + FLAG_ESC) // FCA : hotkey/start exit
+      borShutdown(0, DEFAULT_SHUTDOWN_MESSAGE);
 }
 
 void execute_keyscripts()
@@ -32052,7 +32226,8 @@ void apply_controls()
 
     for(p = 0; p < 4; p++)
     {
-        control_setkey(playercontrolpointers[p], FLAG_ESC,        CONTROL_ESC);
+        //control_setkey(playercontrolpointers[p], FLAG_ESC,        CONTROL_ESC); // FCA
+	control_setkey(playercontrolpointers[p], FLAG_ESC,	      savedata.keys[p][SDID_ESC]); // FCA
         control_setkey(playercontrolpointers[p], FLAG_MOVEUP,     savedata.keys[p][SDID_MOVEUP]);
         control_setkey(playercontrolpointers[p], FLAG_MOVEDOWN,   savedata.keys[p][SDID_MOVEDOWN]);
         control_setkey(playercontrolpointers[p], FLAG_MOVELEFT,   savedata.keys[p][SDID_MOVELEFT]);
@@ -32193,7 +32368,7 @@ void shutdown(int status, char *msg, ...)
 
     if(status != 2)
     {
-        display_credits();
+      // display_credits(); // FCA : fast shutdown
     }
 
     if(startup_done)
diff --git a/sdl/sdlport.c b/sdl/sdlport.c
index d44f3f6..40b4439 100644
--- a/sdl/sdlport.c
+++ b/sdl/sdlport.c
@@ -64,8 +64,18 @@ void borExit(int reset)
 	appExit(0);
 }
 
+extern void loadsettings(); // FCA
+
 int main(int argc, char *argv[])
 {
+	// FCA : Set exe directory
+	char* dirsep = strrchr(argv[0], '\\');
+	if (dirsep == NULL) dirsep = strrchr(argv[0], '/');
+	if (dirsep != NULL) *dirsep = 0;
+	chdir(argv[0]);
+	loadsettings();
+	// FCA
+
 #ifndef SKIP_CODE
 	char pakname[256];
 #endif
@@ -102,11 +112,20 @@ int main(int argc, char *argv[])
 	initSDL();
 
 	packfile_mode(0);
+
+#if !WIN
+	// FCA
+	strcpy(savesDir, "/userdata/saves/openbor");
+	strcpy(logsDir, "/userdata/system/configs/openbor/Logs");
+	strcpy(screenShotsDir, "/userdata/screenshots");
+#endif
+
 #ifdef ANDROID
 	dirExists(rootDir, 1);
     chdir(rootDir);
 #endif
-	dirExists(paksDir, 1);
+    	if (argc <= 1) // FCA
+	  dirExists(paksDir, 1);
 	dirExists(savesDir, 1);
 	dirExists(logsDir, 1);
 	dirExists(screenShotsDir, 1);
@@ -121,25 +140,8 @@ int main(int argc, char *argv[])
 #endif
 
 	// Test command line argument to launch MOD
-	int romArg = 0;
-	if(argc > 1) {
-		int argl = strlen(argv[1]);
-		if(argl > 4) {
-			loadsettings();
-			memcpy(packfile, argv[1], argl);
-			if(dirExists(packfile, 0)) {
-				if(packfile[argl-1] != '/')
-					strcat(packfile, "/");
-					romArg = 1;
-			}
-			else if(memcmp( &packfile[strlen(packfile) - 4], ".pak", 4)) {
-				if(fileExists(packfile))
-					romArg = 1;
-			}
-		}
-	}
-	if(!romArg)
-		Menu();
+	if (argc > 1) strcpy(packfile, argv[1]); else // FCA : Command line
+	  Menu();
 	
 #ifndef SKIP_CODE
 	getPakName(pakname, -1);
diff --git a/source/utils.c b/source/utils.c
index be3bf89..1cd0d74 100644
--- a/source/utils.c
+++ b/source/utils.c
@@ -87,10 +87,10 @@ typedef void DIR;
 #define COPY_ROOT_PATH(buf, name) strncpy(buf, "/mnt/sdcard/OpenBOR/", 20); strncat(buf, name, strlen(name)); strncat(buf, "/", 1);
 #define COPY_PAKS_PATH(buf, name) strncpy(buf, "/mnt/sdcard/OpenBOR/Paks/", 25); strncat(buf, name, strlen(name));
 #else
-#define CHECK_LOGFILE(type)  type ? fileExists("./Logs/OpenBorLog.txt") : fileExists("./Logs/ScriptLog.txt")
-#define OPEN_LOGFILE(type)   type ? fopen("./Logs/OpenBorLog.txt", "wt") : fopen("./Logs/ScriptLog.txt", "wt")
-#define APPEND_LOGFILE(type) type ? fopen("./Logs/OpenBorLog.txt", "at") : fopen("./Logs/ScriptLog.txt", "at")
-#define READ_LOGFILE(type)   type ? fopen("./Logs/OpenBorLog.txt", "rt") : fopen("./Logs/ScriptLog.txt", "rt")
+#define CHECK_LOGFILE(type)  type ? fileExists("/userdata/system/configs/openbor/Logs/OpenBorLog.txt") : fileExists("/userdata/system/configs/openbor/Logs/ScriptLog.txt")
+#define OPEN_LOGFILE(type)   type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "wt") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "wt")
+#define APPEND_LOGFILE(type) type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "at") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "at")
+#define READ_LOGFILE(type)   type ? fopen("/userdata/system/configs/openbor/Logs/OpenBorLog.txt", "rt") : fopen("/userdata/system/configs/openbor/Logs/ScriptLog.txt", "rt")
 #define COPY_ROOT_PATH(buf, name) strncpy(buf, "./", 2); strncat(buf, name, strlen(name)); strncat(buf, "/", 1);
 #define COPY_PAKS_PATH(buf, name) strncpy(buf, "./Paks/", 7); strncat(buf, name, strlen(name));
 #endif
@@ -146,6 +146,14 @@ u32 debug_time = 0;
 
 void getBasePath(char *newName, char *name, int type)
 {
+#if !WIN
+	// FCA
+	if (type == 0 && strcmp(name, "Saves") == 0)
+	{
+		strcpy(newName, "/userdata/saves/openbor/");
+		return;
+	}
+#endif
 #ifndef DC
     char buf[128] = {""};
     switch(type)
