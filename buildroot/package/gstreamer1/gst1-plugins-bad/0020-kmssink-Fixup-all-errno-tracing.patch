From 5814b5ba70a90b8b74c2b93b6643749cae8e0b02 Mon Sep 17 00:00:00 2001
From: Nicolas Dufresne <nicolas.dufresne@collabora.com>
Date: Sun, 26 May 2019 12:13:48 +0200
Subject: [PATCH 20/60] kmssink: Fixup all errno tracing

All DRM ioctl uses errno to report the error and simply returns -1
when some error occured. This patch fixes all usage of the return
value instead of errno to trace the error type and moves to g_strerror
instead of string.h strerror in order to be consistent with the rest
of GStreamer.
---
 sys/kms/gstkmsallocator.c | 16 ++++++++--------
 sys/kms/gstkmssink.c      | 22 ++++++++++------------
 2 files changed, 18 insertions(+), 20 deletions(-)

diff --git a/sys/kms/gstkmsallocator.c b/sys/kms/gstkmsallocator.c
index 17e851d32..916326b16 100644
--- a/sys/kms/gstkmsallocator.c
+++ b/sys/kms/gstkmsallocator.c
@@ -31,7 +31,6 @@
 #include <xf86drm.h>
 #include <xf86drmMode.h>
 #include <stdlib.h>
-#include <string.h>
 #include <sys/mman.h>
 #include <unistd.h>
 
@@ -132,7 +131,8 @@ gst_kms_allocator_memory_reset (GstKMSAllocator * allocator, GstKMSMemory * mem)
   err = drmIoctl (allocator->priv->fd, DRM_IOCTL_MODE_DESTROY_DUMB, &arg);
   if (err)
     GST_WARNING_OBJECT (allocator,
-        "Failed to destroy dumb buffer object: %s %d", strerror (errno), errno);
+        "Failed to destroy dumb buffer object: %s %d",
+        g_strerror (errno), errno);
 
   g_free (mem->bo);
   mem->bo = NULL;
@@ -240,7 +240,7 @@ done:
 create_failed:
   {
     GST_ERROR_OBJECT (allocator, "Failed to create buffer object: %s (%d)",
-        strerror (-ret), ret);
+        g_strerror (errno), errno);
     g_free (kmsmem->bo);
     kmsmem->bo = NULL;
     return FALSE;
@@ -367,7 +367,7 @@ gst_kms_memory_map (GstMemory * mem, gsize maxsize, GstMapFlags flags)
   err = drmIoctl (alloc->priv->fd, DRM_IOCTL_MODE_MAP_DUMB, &arg);
   if (err) {
     GST_ERROR_OBJECT (alloc, "Failed to get offset of buffer object: %s %d",
-        strerror (-err), err);
+        g_strerror (errno), errno);
     return NULL;
   }
 
@@ -375,7 +375,7 @@ gst_kms_memory_map (GstMemory * mem, gsize maxsize, GstMapFlags flags)
       PROT_READ | PROT_WRITE, MAP_SHARED, alloc->priv->fd, arg.offset);
   if (out == MAP_FAILED) {
     GST_ERROR_OBJECT (alloc, "Failed to map dumb buffer object: %s %d",
-        strerror (errno), errno);
+        g_strerror (errno), errno);
     return NULL;
   }
   kmsmem->bo->ptr = out;
@@ -469,7 +469,7 @@ gst_kms_allocator_add_fb (GstKMSAllocator * alloc, GstKMSMemory * kmsmem,
       offsets, &kmsmem->fb_id, 0);
   if (ret) {
     GST_ERROR_OBJECT (alloc, "Failed to bind to framebuffer: %s (%d)",
-        strerror (-ret), ret);
+        g_strerror (errno), errno);
     return FALSE;
   }
 
@@ -547,7 +547,7 @@ gst_kms_allocator_dmabuf_import (GstAllocator * allocator, gint * prime_fds,
     err = drmIoctl (alloc->priv->fd, DRM_IOCTL_GEM_CLOSE, &arg);
     if (err)
       GST_WARNING_OBJECT (allocator,
-          "Failed to close GEM handle: %s %d", strerror (errno), errno);
+          "Failed to close GEM handle: %s %d", g_strerror (errno), errno);
 
     kmsmem->gem_handle[i] = 0;
   }
@@ -558,7 +558,7 @@ gst_kms_allocator_dmabuf_import (GstAllocator * allocator, gint * prime_fds,
 import_fd_failed:
   {
     GST_ERROR_OBJECT (alloc, "Failed to import prime fd %d: %s (%d)",
-        prime_fds[i], strerror (-ret), ret);
+        prime_fds[i], g_strerror (errno), errno);
     /* fallback */
   }
 
diff --git a/sys/kms/gstkmssink.c b/sys/kms/gstkmssink.c
index d52e99c0a..4386987f7 100644
--- a/sys/kms/gstkmssink.c
+++ b/sys/kms/gstkmssink.c
@@ -51,8 +51,6 @@
 #include <xf86drmMode.h>
 #include <drm_fourcc.h>
 
-#include <string.h>
-
 #include "gstkmssink.h"
 #include "gstkmsutils.h"
 #include "gstkmsbufferpool.h"
@@ -486,7 +484,7 @@ mode_failed:
   }
 modesetting_failed:
   {
-    GST_ERROR_OBJECT (self, "Failed to set mode: %s", strerror (errno));
+    GST_ERROR_OBJECT (self, "Failed to set mode: %s", g_strerror (errno));
     goto bail;
   }
 }
@@ -828,7 +826,7 @@ open_failed:
   {
     GST_ELEMENT_ERROR (self, RESOURCE, OPEN_READ_WRITE,
         ("Could not open DRM module %s", GST_STR_NULL (self->devname)),
-        ("reason: %s (%d)", strerror (errno), errno));
+        ("reason: %s (%d)", g_strerror (errno), errno));
     return FALSE;
   }
 
@@ -836,7 +834,7 @@ resources_failed:
   {
     GST_ELEMENT_ERROR (self, RESOURCE, SETTINGS,
         ("drmModeGetResources failed"),
-        ("reason: %s (%d)", strerror (errno), errno));
+        ("reason: %s (%d)", g_strerror (errno), errno));
     goto bail;
   }
 
@@ -865,7 +863,7 @@ plane_resources_failed:
   {
     GST_ELEMENT_ERROR (self, RESOURCE, SETTINGS,
         ("drmModeGetPlaneResources failed"),
-        ("reason: %s (%d)", strerror (errno), errno));
+        ("reason: %s (%d)", g_strerror (errno), errno));
     goto bail;
   }
 
@@ -1319,20 +1317,20 @@ gst_kms_sink_sync (GstKMSSink * self)
   /* ERRORS */
 vblank_failed:
   {
-    GST_WARNING_OBJECT (self, "drmWaitVBlank failed: %s (%d)", strerror (-ret),
-        ret);
+    GST_WARNING_OBJECT (self, "drmWaitVBlank failed: %s (%d)",
+        g_strerror (errno), errno);
     return FALSE;
   }
 pageflip_failed:
   {
     GST_WARNING_OBJECT (self, "drmModePageFlip failed: %s (%d)",
-        strerror (-ret), ret);
+        g_strerror (errno), errno);
     return FALSE;
   }
 event_failed:
   {
-    GST_ERROR_OBJECT (self, "drmHandleEvent failed: %s (%d)", strerror (-ret),
-        ret);
+    GST_ERROR_OBJECT (self, "drmHandleEvent failed: %s (%d)",
+        g_strerror (errno), errno);
     return FALSE;
   }
 }
@@ -1662,7 +1660,7 @@ set_plane_failed:
         result.w, result.h, src.x, src.y, src.w, src.h, dst.x, dst.y, dst.w,
         dst.h);
     GST_ELEMENT_ERROR (self, RESOURCE, FAILED,
-        (NULL), ("drmModeSetPlane failed: %s (%d)", strerror (-ret), ret));
+        (NULL), ("drmModeSetPlane failed: %s (%d)", g_strerror (errno), errno));
     goto bail;
   }
 no_disp_ratio:
-- 
2.20.1

