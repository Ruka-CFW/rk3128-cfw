From bf639677d307a78428c085c9834a835b42eb78a8 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 26 Nov 2020 11:32:16 +0800
Subject: [PATCH 52/60] waylandsink: Convert xdg shell to unstable zxdg shell
 v6

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 ext/wayland/Makefile.am |  6 ++---
 ext/wayland/meson.build |  3 ++-
 ext/wayland/wldisplay.c | 24 +++++++++----------
 ext/wayland/wldisplay.h |  4 ++--
 ext/wayland/wlwindow.c  | 51 +++++++++++++++++++++--------------------
 ext/wayland/wlwindow.h  |  4 ++--
 6 files changed, 47 insertions(+), 45 deletions(-)

diff --git a/ext/wayland/Makefile.am b/ext/wayland/Makefile.am
index 95bb97e7f..97fdd81f9 100644
--- a/ext/wayland/Makefile.am
+++ b/ext/wayland/Makefile.am
@@ -7,8 +7,8 @@ BUILT_SOURCES = \
 	linux-dmabuf-unstable-v1-client-protocol.h \
 	fullscreen-shell-unstable-v1-protocol.c \
 	fullscreen-shell-unstable-v1-client-protocol.h \
-	xdg-shell-protocol.c \
-	xdg-shell-client-protocol.h
+	xdg-shell-unstable-v6-protocol.c \
+	xdg-shell-unstable-v6-client-protocol.h
 
 libgstwaylandsink_la_SOURCES =  \
 	gstwaylandsink.c \
@@ -23,7 +23,7 @@ nodist_libgstwaylandsink_la_SOURCES = \
 	viewporter-protocol.c \
 	linux-dmabuf-unstable-v1-protocol.c \
 	fullscreen-shell-unstable-v1-protocol.c \
-	xdg-shell-protocol.c
+	xdg-shell-unstable-v6-protocol.c
 
 libgstwaylandsink_la_CFLAGS = \
 	$(GST_PLUGINS_BAD_CFLAGS) \
diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index 598536b29..db06f9d61 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -17,7 +17,8 @@ if use_wayland
          'linux-dmabuf-unstable-v1-protocol.c', 'linux-dmabuf-unstable-v1-client-protocol.h'],
         ['/unstable/fullscreen-shell/fullscreen-shell-unstable-v1.xml',
          'fullscreen-shell-unstable-v1-protocol.c', 'fullscreen-shell-unstable-v1-client-protocol.h'],
-        ['/stable/xdg-shell/xdg-shell.xml', 'xdg-shell-protocol.c', 'xdg-shell-client-protocol.h'],
+        ['/unstable/xdg-shell/xdg-shell-unstable-v6.xml',
+         'xdg-shell-unstable-v6-protocol.c', 'xdg-shell-unstable-v6-client-protocol.h'],
     ]
     protocols_files = []
 
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index 6cbdc0cce..714bfe1cd 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -96,8 +96,8 @@ gst_wl_display_finalize (GObject * gobject)
   if (self->wl_shell)
     wl_shell_destroy (self->wl_shell);
 
-  if (self->xdg_wm_base)
-    xdg_wm_base_destroy (self->xdg_wm_base);
+  if (self->xdg_shell)
+    zxdg_shell_v6_destroy (self->xdg_shell);
 
   if (self->fullscreen_shell)
     zwp_fullscreen_shell_v1_release (self->fullscreen_shell);
@@ -200,14 +200,14 @@ gst_wl_display_check_format_for_dmabuf (GstWlDisplay * display,
 }
 
 static void
-handle_xdg_wm_base_ping (void *user_data, struct xdg_wm_base *xdg_wm_base,
+handle_xdg_shell_ping (void *user_data, struct zxdg_shell_v6 *xdg_shell,
     uint32_t serial)
 {
-  xdg_wm_base_pong (xdg_wm_base, serial);
+  zxdg_shell_v6_pong (xdg_shell, serial);
 }
 
-static const struct xdg_wm_base_listener xdg_wm_base_listener = {
-  handle_xdg_wm_base_ping
+static const struct zxdg_shell_v6_listener xdg_shell_listener = {
+  handle_xdg_shell_ping
 };
 
 static void
@@ -224,10 +224,10 @@ registry_handle_global (void *data, struct wl_registry *registry,
         wl_registry_bind (registry, id, &wl_subcompositor_interface, 1);
   } else if (g_strcmp0 (interface, "wl_shell") == 0) {
     self->wl_shell = wl_registry_bind (registry, id, &wl_shell_interface, 1);
-  } else if (g_strcmp0 (interface, "xdg_wm_base") == 0) {
-    self->xdg_wm_base =
-        wl_registry_bind (registry, id, &xdg_wm_base_interface, 1);
-    xdg_wm_base_add_listener (self->xdg_wm_base, &xdg_wm_base_listener, self);
+  } else if (g_strcmp0 (interface, "zxdg_shell_v6") == 0) {
+    self->xdg_shell =
+        wl_registry_bind (registry, id, &zxdg_shell_v6_interface, 1);
+    zxdg_shell_v6_add_listener (self->xdg_shell, &xdg_shell_listener, self);
   } else if (g_strcmp0 (interface, "zwp_fullscreen_shell_v1") == 0) {
     self->fullscreen_shell = wl_registry_bind (registry, id,
         &zwp_fullscreen_shell_v1_interface, 1);
@@ -367,12 +367,12 @@ gst_wl_display_new_existing (struct wl_display * display,
     g_warning ("Could not bind to zwp_linux_dmabuf_v1");
   }
 
-  if (!self->wl_shell && !self->xdg_wm_base && !self->fullscreen_shell) {
+  if (!self->wl_shell && !self->xdg_shell && !self->fullscreen_shell) {
     /* If wl_surface and wl_display are passed via GstContext
      * wl_shell, xdg_shell and zwp_fullscreen_shell are not used.
      * In this case is correct to continue.
      */
-    g_warning ("Could not bind to either wl_shell, xdg_wm_base or "
+    g_warning ("Could not bind to either wl_shell, xdg_shell or "
         "zwp_fullscreen_shell, video display may not work properly.");
   }
 
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index f2025a6a0..365031d78 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -24,7 +24,7 @@
 #include <gst/gst.h>
 #include <gst/video/video.h>
 #include <wayland-client.h>
-#include "xdg-shell-client-protocol.h"
+#include "xdg-shell-unstable-v6-client-protocol.h"
 #include "viewporter-client-protocol.h"
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
@@ -55,7 +55,7 @@ struct _GstWlDisplay
   struct wl_compositor *compositor;
   struct wl_subcompositor *subcompositor;
   struct wl_shell *wl_shell;
-  struct xdg_wm_base *xdg_wm_base;
+  struct zxdg_shell_v6 *xdg_shell;
   struct zwp_fullscreen_shell_v1 *fullscreen_shell;
   struct wl_shm *shm;
   struct wp_viewporter *viewporter;
diff --git a/ext/wayland/wlwindow.c b/ext/wayland/wlwindow.c
index b9f4be841..25f5896de 100644
--- a/ext/wayland/wlwindow.c
+++ b/ext/wayland/wlwindow.c
@@ -46,7 +46,7 @@ G_DEFINE_TYPE (GstWlWindow, gst_wl_window, G_TYPE_OBJECT);
 static void gst_wl_window_finalize (GObject * gobject);
 
 static void
-handle_xdg_toplevel_close (void *data, struct xdg_toplevel *xdg_toplevel)
+handle_xdg_toplevel_close (void *data, struct zxdg_toplevel_v6 *xdg_toplevel)
 {
   GstWlWindow *window = data;
 
@@ -55,8 +55,9 @@ handle_xdg_toplevel_close (void *data, struct xdg_toplevel *xdg_toplevel)
 }
 
 static void
-handle_xdg_toplevel_configure (void *data, struct xdg_toplevel *xdg_toplevel,
-    int32_t width, int32_t height, struct wl_array *states)
+handle_xdg_toplevel_configure (void *data,
+    struct zxdg_toplevel_v6 *xdg_toplevel, int32_t width, int32_t height,
+    struct wl_array *states)
 {
   GstWlWindow *window = data;
   const uint32_t *state;
@@ -66,10 +67,10 @@ handle_xdg_toplevel_configure (void *data, struct xdg_toplevel *xdg_toplevel,
 
   wl_array_for_each (state, states) {
     switch (*state) {
-      case XDG_TOPLEVEL_STATE_FULLSCREEN:
-      case XDG_TOPLEVEL_STATE_MAXIMIZED:
-      case XDG_TOPLEVEL_STATE_RESIZING:
-      case XDG_TOPLEVEL_STATE_ACTIVATED:
+      case ZXDG_TOPLEVEL_V6_STATE_FULLSCREEN:
+      case ZXDG_TOPLEVEL_V6_STATE_MAXIMIZED:
+      case ZXDG_TOPLEVEL_V6_STATE_RESIZING:
+      case ZXDG_TOPLEVEL_V6_STATE_ACTIVATED:
         break;
     }
   }
@@ -80,17 +81,17 @@ handle_xdg_toplevel_configure (void *data, struct xdg_toplevel *xdg_toplevel,
   gst_wl_window_set_render_rectangle (window, 0, 0, width, height);
 }
 
-static const struct xdg_toplevel_listener xdg_toplevel_listener = {
+static const struct zxdg_toplevel_v6_listener xdg_toplevel_listener = {
   handle_xdg_toplevel_configure,
   handle_xdg_toplevel_close,
 };
 
 static void
-handle_xdg_surface_configure (void *data, struct xdg_surface *xdg_surface,
+handle_xdg_surface_configure (void *data, struct zxdg_surface_v6 *xdg_surface,
     uint32_t serial)
 {
   GstWlWindow *window = data;
-  xdg_surface_ack_configure (xdg_surface, serial);
+  zxdg_surface_v6_ack_configure (xdg_surface, serial);
 
   g_mutex_lock (&window->configure_mutex);
   window->configured = TRUE;
@@ -98,7 +99,7 @@ handle_xdg_surface_configure (void *data, struct xdg_surface *xdg_surface,
   g_mutex_unlock (&window->configure_mutex);
 }
 
-static const struct xdg_surface_listener xdg_surface_listener = {
+static const struct zxdg_surface_v6_listener xdg_surface_listener = {
   handle_xdg_surface_configure,
 };
 
@@ -166,9 +167,9 @@ gst_wl_window_finalize (GObject * gobject)
     wl_shell_surface_destroy (self->wl_shell_surface);
 
   if (self->xdg_toplevel)
-    xdg_toplevel_destroy (self->xdg_toplevel);
+    zxdg_toplevel_v6_destroy (self->xdg_toplevel);
   if (self->xdg_surface)
-    xdg_surface_destroy (self->xdg_surface);
+    zxdg_surface_v6_destroy (self->xdg_surface);
 
   if (self->video_viewport)
     wp_viewport_destroy (self->video_viewport);
@@ -246,11 +247,11 @@ gst_wl_window_ensure_fullscreen (GstWlWindow * window, gboolean fullscreen)
   if (!window)
     return;
 
-  if (window->display->xdg_wm_base) {
+  if (window->display->xdg_shell) {
     if (fullscreen)
-      xdg_toplevel_set_fullscreen (window->xdg_toplevel, NULL);
+      zxdg_toplevel_v6_set_fullscreen (window->xdg_toplevel, NULL);
     else
-      xdg_toplevel_unset_fullscreen (window->xdg_toplevel);
+      zxdg_toplevel_v6_unset_fullscreen (window->xdg_toplevel);
   } else {
     if (fullscreen)
       wl_shell_surface_set_fullscreen (window->wl_shell_surface,
@@ -269,24 +270,24 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
   window = gst_wl_window_new_internal (display, render_lock);
 
   /* Check which protocol we will use (in order of preference) */
-  if (display->xdg_wm_base) {
+  if (display->xdg_shell) {
     /* First create the XDG surface */
-    window->xdg_surface = xdg_wm_base_get_xdg_surface (display->xdg_wm_base,
+    window->xdg_surface = zxdg_shell_v6_get_xdg_surface (display->xdg_shell,
         window->area_surface);
     if (!window->xdg_surface) {
       GST_ERROR ("Unable to get xdg_surface");
       goto error;
     }
-    xdg_surface_add_listener (window->xdg_surface, &xdg_surface_listener,
+    zxdg_surface_v6_add_listener (window->xdg_surface, &xdg_surface_listener,
         window);
 
     /* Then the toplevel */
-    window->xdg_toplevel = xdg_surface_get_toplevel (window->xdg_surface);
+    window->xdg_toplevel = zxdg_surface_v6_get_toplevel (window->xdg_surface);
     if (!window->xdg_toplevel) {
       GST_ERROR ("Unable to get xdg_toplevel");
       goto error;
     }
-    xdg_toplevel_add_listener (window->xdg_toplevel,
+    zxdg_toplevel_v6_add_listener (window->xdg_toplevel,
         &xdg_toplevel_listener, window);
 
     gst_wl_window_ensure_fullscreen (window, fullscreen);
@@ -317,14 +318,14 @@ gst_wl_window_new_toplevel (GstWlDisplay * display, const GstVideoInfo * info,
         window->area_surface, ZWP_FULLSCREEN_SHELL_V1_PRESENT_METHOD_ZOOM,
         NULL);
   } else {
-    GST_ERROR ("Unable to use either wl_shell, xdg_wm_base or "
+    GST_ERROR ("Unable to use either wl_shell, xdg_shell or "
         "zwp_fullscreen_shell.");
     goto error;
   }
 
   /* render_rectangle is already set via toplevel_configure in
-   * xdg_shell fullscreen mode */
-  if (!(display->xdg_wm_base && fullscreen)) {
+   * fullscreen mode */
+  if (!fullscreen) {
     /* set the initial size to be the same as the reported video size */
     gint width =
         gst_util_uint64_scale_int_round (info->width, info->par_n, info->par_d);
@@ -382,7 +383,7 @@ gst_wl_window_is_toplevel (GstWlWindow * window)
 {
   g_return_val_if_fail (window != NULL, FALSE);
 
-  if (window->display->xdg_wm_base)
+  if (window->display->xdg_shell)
     return (window->xdg_toplevel != NULL);
   else
     return (window->wl_shell_surface != NULL);
diff --git a/ext/wayland/wlwindow.h b/ext/wayland/wlwindow.h
index cecbda664..47e86e7c4 100644
--- a/ext/wayland/wlwindow.h
+++ b/ext/wayland/wlwindow.h
@@ -53,8 +53,8 @@ struct _GstWlWindow
   struct wl_subsurface *video_subsurface;
   struct wp_viewport *video_viewport;
   struct wl_shell_surface *wl_shell_surface;
-  struct xdg_surface *xdg_surface;
-  struct xdg_toplevel *xdg_toplevel;
+  struct zxdg_surface_v6 *xdg_surface;
+  struct zxdg_toplevel_v6 *xdg_toplevel;
   struct wl_callback *callback;
   gboolean configured;
   GCond configure_cond;
-- 
2.20.1

