From 92dccc15e60669fde64e0c8671f2134afb9d6f71 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 8 Nov 2019 17:36:20 +0800
Subject: [PATCH] video-flip: Support rockchip RGA 2D accel

Disabled by default, set env GST_VIDEO_FLIP_USE_RGA=1 to enable.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 configure.ac                   |  12 ++
 gst/videofilter/gstvideoflip.c | 204 +++++++++++++++++++++++++++++++++
 2 files changed, 216 insertions(+)

diff --git a/configure.ac b/configure.ac
index deb74f1..ba8f7f5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -293,6 +293,18 @@ AC_SUBST(GLIB_PREFIX)
 AC_SUBST(GST_PREFIX)
 AC_SUBST(GSTPB_PREFIX)
 
+dnl check for rockchip RGA
+RGA_LIBS=
+RGA_HEADER=
+
+AC_CHECK_LIB([rga], [c_RkRgaInit], RGA_LIBS="-lrga")
+AC_CHECK_HEADERS([rga/RgaApi.h], RGA_HEADER="yes")
+
+if test "x$RGA_LIBS" != "x" && test "x$RGA_HEADER" = "xyes"; then
+  AC_SUBST(RGA_LIBS)
+  AC_DEFINE(HAVE_RGA, 1, [Have rockchip RGA])
+fi
+
 dnl GTK is optional and used in examples
 HAVE_GTK=no
 GTK_REQ=3.0.0
diff --git a/gst/videofilter/gstvideoflip.c b/gst/videofilter/gstvideoflip.c
index c6132f5..43ea033 100644
--- a/gst/videofilter/gstvideoflip.c
+++ b/gst/videofilter/gstvideoflip.c
@@ -48,6 +48,11 @@
 #include <gst/gst.h>
 #include <gst/video/video.h>
 
+#ifdef HAVE_RGA
+#include <rga/rga.h>
+#include <rga/RgaApi.h>
+#endif
+
 /* GstVideoFlip properties */
 enum
 {
@@ -1118,6 +1123,196 @@ gst_video_flip_before_transform (GstBaseTransform * trans, GstBuffer * in)
     gst_object_sync_values (GST_OBJECT (videoflip), stream_time);
 }
 
+#ifdef HAVE_RGA
+static RgaSURF_FORMAT
+get_rga_format (GstVideoFormat format)
+{
+  switch (format) {
+    case GST_VIDEO_FORMAT_BGRA:
+    case GST_VIDEO_FORMAT_BGRx:
+      return RK_FORMAT_BGRA_8888;
+    case GST_VIDEO_FORMAT_RGBA:
+      return RK_FORMAT_RGBA_8888;
+    case GST_VIDEO_FORMAT_RGBx:
+      return RK_FORMAT_RGBX_8888;
+    case GST_VIDEO_FORMAT_BGR:
+      return RK_FORMAT_BGR_888;
+    case GST_VIDEO_FORMAT_RGB:
+      return RK_FORMAT_RGB_888;
+    case GST_VIDEO_FORMAT_RGB15:
+      return RK_FORMAT_RGBA_5551;
+    case GST_VIDEO_FORMAT_RGB16:
+      return RK_FORMAT_RGB_565;
+    case GST_VIDEO_FORMAT_NV12:
+      return RK_FORMAT_YCbCr_420_SP;
+    case GST_VIDEO_FORMAT_NV21:
+      return RK_FORMAT_YCrCb_420_SP;
+    case GST_VIDEO_FORMAT_I420:
+      return RK_FORMAT_YCbCr_420_P;
+    case GST_VIDEO_FORMAT_YV12:
+      return RK_FORMAT_YCrCb_420_P;
+    case GST_VIDEO_FORMAT_NV16:
+      return RK_FORMAT_YCbCr_422_SP;
+    case GST_VIDEO_FORMAT_NV61:
+      return RK_FORMAT_YCrCb_422_SP;
+    case GST_VIDEO_FORMAT_Y42B:
+      return RK_FORMAT_YCbCr_422_P;
+    case GST_VIDEO_FORMAT_P010_10LE:
+      return RK_FORMAT_YCbCr_420_SP_10B;
+    default:
+      return RK_FORMAT_UNKNOWN;
+  }
+}
+
+static gboolean
+get_rga_info (const GstVideoFrame * frame, rga_info_t * info,
+    int x, int y, int w, int h)
+{
+  GstVideoMeta *meta = gst_buffer_get_video_meta (frame->buffer);
+  const GstVideoInfo *vinfo = &frame->info;
+  RgaSURF_FORMAT format;
+  gint hstride, vstride0, i;
+  guint8 *ptr;
+
+  memset (info, 0, sizeof (rga_info_t));
+
+  if (!meta)
+    return FALSE;
+
+  hstride = meta->stride[0];
+  vstride0 = meta->n_planes == 1 ? meta->height : meta->offset[1] / hstride;
+
+  /* RGA requires contig buffer */
+  ptr = GST_VIDEO_FRAME_PLANE_DATA (frame, 0);
+  for (i = 1; i < GST_VIDEO_FRAME_N_PLANES (frame); i++) {
+    gint size = GST_VIDEO_FRAME_PLANE_OFFSET (frame, i) -
+        GST_VIDEO_FRAME_PLANE_OFFSET (frame, i - 1);
+    gint vstride = size / meta->stride[i - 1];
+
+    ptr += size;
+    if (ptr != GST_VIDEO_FRAME_PLANE_DATA (frame, i))
+      return FALSE;
+
+    if ((meta->stride[i] != hstride && meta->stride[i] != hstride / 2) ||
+        (vstride != vstride0 && vstride != vstride0 / 2))
+      return FALSE;
+  }
+
+  format = get_rga_format (GST_VIDEO_INFO_FORMAT (vinfo));
+  switch (format) {
+    case RK_FORMAT_RGBX_8888:
+    case RK_FORMAT_RGBA_8888:
+    case RK_FORMAT_BGRA_8888:
+      hstride /= 4;
+      break;
+    case RK_FORMAT_RGB_888:
+    case RK_FORMAT_BGR_888:
+      hstride /= 3;
+      break;
+    case RK_FORMAT_RGBA_5551:
+    case RK_FORMAT_RGB_565:
+      hstride /= 2;
+      break;
+    case RK_FORMAT_YCbCr_420_SP_10B:
+    case RK_FORMAT_YCbCr_422_SP:
+    case RK_FORMAT_YCrCb_422_SP:
+    case RK_FORMAT_YCbCr_422_P:
+    case RK_FORMAT_YCrCb_422_P:
+    case RK_FORMAT_YCbCr_420_SP:
+    case RK_FORMAT_YCrCb_420_SP:
+    case RK_FORMAT_YCbCr_420_P:
+    case RK_FORMAT_YCrCb_420_P:
+      /* RGA requires yuv image rect align to 2 */
+      x = (x + 1) & ~1;
+      y = (y + 1) & ~1;
+      w &= ~1;
+      h &= ~1;
+
+      if (vstride0 % 2)
+        return FALSE;
+      break;
+    default:
+      return FALSE;
+  }
+
+  info->virAddr = GST_VIDEO_FRAME_PLANE_DATA (frame, 0);
+  info->mmuFlag = 1;
+
+  rga_set_rect (&info->rect, x, y, w, h, hstride, vstride0, format);
+  return TRUE;
+}
+
+static gboolean
+video_flip_try_rga (GstVideoFlip * videoflip,
+    GstVideoFrame * in_frame, GstVideoFrame * out_frame)
+{
+  gint sw = GST_VIDEO_FRAME_WIDTH (in_frame);
+  gint sh = GST_VIDEO_FRAME_HEIGHT (in_frame);
+  gint dw = GST_VIDEO_FRAME_WIDTH (out_frame);
+  gint dh = GST_VIDEO_FRAME_HEIGHT (out_frame);
+
+  rga_info_t src_info = { 0 };
+  rga_info_t dst_info = { 0 };
+  static int rga_supported = 1;
+  static int rga_inited = 0;
+  const char *buf;
+
+  buf = getenv ("GST_VIDEO_FLIP_USE_RGA");
+  if (!buf || strcmp (buf, "1"))
+    return FALSE;
+
+  if (!rga_supported)
+    return FALSE;
+
+  if (!rga_inited) {
+    if (c_RkRgaInit () < 0) {
+      rga_supported = 0;
+      return FALSE;
+    }
+    rga_inited = 1;
+  }
+
+  if (!get_rga_info (in_frame, &src_info, 0, 0, sw, sh)) {
+    GST_DEBUG ("unsupported src info for RGA");
+    return FALSE;
+  }
+
+  if (!get_rga_info (out_frame, &dst_info, 0, 0, dw, dh)) {
+    GST_DEBUG ("unsupported dst info for RGA");
+    return FALSE;
+  }
+
+  switch (videoflip->active_method) {
+    case GST_VIDEO_ORIENTATION_90R:
+      src_info.rotation = HAL_TRANSFORM_ROT_90;
+      break;
+    case GST_VIDEO_ORIENTATION_180:
+      src_info.rotation = HAL_TRANSFORM_ROT_180;
+      break;
+    case GST_VIDEO_ORIENTATION_90L:
+      src_info.rotation = HAL_TRANSFORM_ROT_270;
+      break;
+    case GST_VIDEO_ORIENTATION_HORIZ:
+      src_info.rotation = HAL_TRANSFORM_FLIP_H;
+      break;
+    case GST_VIDEO_ORIENTATION_VERT:
+      src_info.rotation = HAL_TRANSFORM_FLIP_V;
+      break;
+    default:
+      GST_DEBUG ("unsupported rotation for RGA");
+      return FALSE;
+  }
+
+  if (c_RkRgaBlit (&src_info, &dst_info, NULL) < 0) {
+    GST_DEBUG ("failed to blit with RGA");
+    return FALSE;
+  }
+
+  GST_DEBUG ("flipped with RGA");
+  return TRUE;
+}
+#endif
+
 static GstFlowReturn
 gst_video_flip_transform_frame (GstVideoFilter * vfilter,
     GstVideoFrame * in_frame, GstVideoFrame * out_frame)
@@ -1136,6 +1331,15 @@ gst_video_flip_transform_frame (GstVideoFilter * vfilter,
   g_type_class_unref (enum_class);
 
   GST_OBJECT_LOCK (videoflip);
+
+#ifdef HAVE_RGA
+  /* Accel flip with rockchip RGA */
+  if (video_flip_try_rga (videoflip, in_frame, out_frame)) {
+    GST_OBJECT_UNLOCK (videoflip);
+    return GST_FLOW_OK;
+  }
+#endif
+
   videoflip->process (videoflip, out_frame, in_frame);
   GST_OBJECT_UNLOCK (videoflip);
 
-- 
2.20.1

