From 38c9354c46f867baae99ec41e839751111bc7216 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Mon, 4 Nov 2019 11:11:59 +0800
Subject: [PATCH 1/3] Support PIXMAN_nv12 format

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 pixman/pixman-access.c | 86 ++++++++++++++++++++++++++++++++++++++++++++++++++
 pixman/pixman.c        |  3 +-
 pixman/pixman.h        |  6 +++-
 3 files changed, 93 insertions(+), 2 deletions(-)

diff --git a/pixman/pixman-access.c b/pixman/pixman-access.c
index 4f0642d..793a7a4 100644
--- a/pixman/pixman-access.c
+++ b/pixman/pixman-access.c
@@ -192,6 +192,25 @@
     ((uint8_t *) ((bits) + offset0 +                                    \
                   ((stride) >> 1) * ((line) >> 1)))
 
+/*
+ * NV12 setup and access macros
+ */
+
+#define NV12_SETUP(image)                                               \
+    bits_image_t *__bits_image = (bits_image_t *)image;                 \
+    uint32_t *bits = __bits_image->bits;                                \
+    int stride = __bits_image->rowstride;                               \
+    int offset0 = stride < 0 ?                                          \
+    (-stride) * ((__bits_image->height - 1) >> 1) - stride :	\
+    stride * __bits_image->height
+
+#define NV12_Y(line)                                                    \
+    ((uint8_t *) ((bits) + (stride) * (line)))
+
+#define NV12_UV(line)                                                    \
+    ((uint8_t *) ((bits) + offset0 +                                    \
+                  (stride) * ((line) >> 1)))
+
 /* Misc. helpers */
 
 static force_inline void
@@ -803,6 +822,42 @@ fetch_scanline_yv12 (bits_image_t   *image,
     }
 }
 
+static void
+fetch_scanline_nv12 (bits_image_t   *image,
+                     int             x,
+                     int             line,
+                     int             width,
+                     uint32_t *      buffer,
+                     const uint32_t *mask)
+{
+    NV12_SETUP (image);
+    uint8_t *y_line = NV12_Y (line);
+    uint8_t *uv_line = NV12_UV (line);
+    int i;
+    
+    for (i = 0; i < width; i++)
+    {
+	int16_t y, u, v;
+	int32_t r, g, b;
+
+	y = y_line[x + i] - 16;
+	u = uv_line[(x + i) & -2] - 128;
+	v = uv_line[((x + i) & -2) + 1] - 128;
+
+	/* R = 1.164(Y - 16) + 1.596(V - 128) */
+	r = 0x012b27 * y + 0x019a2e * v;
+	/* G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128) */
+	g = 0x012b27 * y - 0x00d0f2 * v - 0x00647e * u;
+	/* B = 1.164(Y - 16) + 2.018(U - 128) */
+	b = 0x012b27 * y + 0x0206a2 * u;
+
+	*buffer++ = 0xff000000 |
+	    (r >= 0 ? r < 0x1000000 ? r         & 0xff0000 : 0xff0000 : 0) |
+	    (g >= 0 ? g < 0x1000000 ? (g >> 8)  & 0x00ff00 : 0x00ff00 : 0) |
+	    (b >= 0 ? b < 0x1000000 ? (b >> 16) & 0x0000ff : 0x0000ff : 0);
+    }
+}
+
 /**************************** Pixel wise fetching *****************************/
 
 static argb_t
@@ -960,6 +1015,32 @@ fetch_pixel_yv12 (bits_image_t *image,
 	(b >= 0 ? b < 0x1000000 ? (b >> 16) & 0x0000ff : 0x0000ff : 0);
 }
 
+static uint32_t
+fetch_pixel_nv12 (bits_image_t *image,
+		  int           offset,
+		  int           line)
+{
+    NV12_SETUP (image);
+    int16_t y = NV12_Y (line)[offset] - 16;
+    int16_t u = NV12_UV (line)[offset & -2] - 128;
+    int16_t v = NV12_UV (line)[(offset & -2) + 1] - 128;
+    int32_t r, g, b;
+    
+    /* R = 1.164(Y - 16) + 1.596(V - 128) */
+    r = 0x012b27 * y + 0x019a2e * v;
+    
+    /* G = 1.164(Y - 16) - 0.813(V - 128) - 0.391(U - 128) */
+    g = 0x012b27 * y - 0x00d0f2 * v - 0x00647e * u;
+    
+    /* B = 1.164(Y - 16) + 2.018(U - 128) */
+    b = 0x012b27 * y + 0x0206a2 * u;
+    
+    return 0xff000000 |
+	(r >= 0 ? r < 0x1000000 ? r         & 0xff0000 : 0xff0000 : 0) |
+	(g >= 0 ? g < 0x1000000 ? (g >> 8)  & 0x00ff00 : 0x00ff00 : 0) |
+	(b >= 0 ? b < 0x1000000 ? (b >> 16) & 0x0000ff : 0x0000ff : 0);
+}
+
 /*********************************** Store ************************************/
 
 static void
@@ -1383,6 +1464,11 @@ static const format_info_t accessors[] =
       fetch_pixel_yv12, fetch_pixel_generic_float,
       NULL, NULL },
     
+    { PIXMAN_nv12,
+      fetch_scanline_nv12, fetch_scanline_generic_float,
+      fetch_pixel_nv12, fetch_pixel_generic_float,
+      NULL, NULL },
+
     { PIXMAN_null },
 };
 
diff --git a/pixman/pixman.c b/pixman/pixman.c
index f932eac..0952683 100644
--- a/pixman/pixman.c
+++ b/pixman/pixman.c
@@ -1065,6 +1065,7 @@ pixman_format_supported_source (pixman_format_code_t format)
     /* YUV formats */
     case PIXMAN_yuy2:
     case PIXMAN_yv12:
+    case PIXMAN_nv12:
 	return TRUE;
 
     default:
@@ -1087,7 +1088,7 @@ PIXMAN_EXPORT pixman_bool_t
 pixman_format_supported_destination (pixman_format_code_t format)
 {
     /* YUV formats cannot be written to at the moment */
-    if (format == PIXMAN_yuy2 || format == PIXMAN_yv12)
+    if (format == PIXMAN_yuy2 || format == PIXMAN_yv12 || format == PIXMAN_nv12)
 	return FALSE;
 
     return pixman_format_supported_source (format);
diff --git a/pixman/pixman.h b/pixman/pixman.h
index 509ba5e..99b017c 100644
--- a/pixman/pixman.h
+++ b/pixman/pixman.h
@@ -679,6 +679,9 @@ struct pixman_indexed
 #define PIXMAN_TYPE_RGBA	9
 #define PIXMAN_TYPE_ARGB_SRGB	10
 
+/* HACK: Use maximum value to avoid conflict */
+#define PIXMAN_TYPE_NV12	0x3f
+
 #define PIXMAN_FORMAT_COLOR(f)				\
 	(PIXMAN_FORMAT_TYPE(f) == PIXMAN_TYPE_ARGB ||	\
 	 PIXMAN_FORMAT_TYPE(f) == PIXMAN_TYPE_ABGR ||	\
@@ -753,7 +756,8 @@ typedef enum {
 
 /* YUV formats */
     PIXMAN_yuy2 =	 PIXMAN_FORMAT(16,PIXMAN_TYPE_YUY2,0,0,0,0),
-    PIXMAN_yv12 =	 PIXMAN_FORMAT(12,PIXMAN_TYPE_YV12,0,0,0,0)
+    PIXMAN_yv12 =	 PIXMAN_FORMAT(12,PIXMAN_TYPE_YV12,0,0,0,0),
+    PIXMAN_nv12 =	 PIXMAN_FORMAT(12,PIXMAN_TYPE_NV12,0,0,0,0),
 } pixman_format_code_t;
 
 /* Querying supported format values. */
-- 
2.11.0

