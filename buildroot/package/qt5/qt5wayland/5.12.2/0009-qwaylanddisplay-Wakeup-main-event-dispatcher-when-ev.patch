From 0d9ee6332bb8d161c928d5acc0fd129ef15a00df Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Sat, 9 May 2020 17:05:32 +0800
Subject: [PATCH 09/16] qwaylanddisplay: Wakeup main event dispatcher when
 events pending

The socket might not be able to generate poll events to wakeup the main
event dispatcher when there're multiple wayland clients(e.g. waylandsink)
reading it.

So let's create a extra thread to check the wayland display event queue
for pending events and wakeup the main event dispatcher.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 src/client/qwaylanddisplay.cpp | 50 +++++++++++++++++++++++++++++++++-
 src/client/qwaylanddisplay_p.h |  2 ++
 2 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/src/client/qwaylanddisplay.cpp b/src/client/qwaylanddisplay.cpp
index bee46a8..c884645 100644
--- a/src/client/qwaylanddisplay.cpp
+++ b/src/client/qwaylanddisplay.cpp
@@ -73,6 +73,8 @@
 
 #include <QtCore/QDebug>
 
+#include <QThread>
+
 #include <errno.h>
 #include <poll.h>
 
@@ -82,6 +84,48 @@ namespace QtWaylandClient {
 
 Q_LOGGING_CATEGORY(lcQpaWayland, "qt.qpa.wayland"); // for general (uncategorized) Wayland platform logging
 
+class QWaylandDisplayThread : public QThread
+{
+public:
+    QWaylandDisplayThread(struct wl_display *display);
+    ~QWaylandDisplayThread();
+
+protected:
+    virtual void run() override;
+
+private:
+    struct wl_display *mDisplay = nullptr;
+    bool quit;
+};
+
+QWaylandDisplayThread::QWaylandDisplayThread(struct wl_display *display)
+    : mDisplay(display), quit(false)
+{
+    start();
+}
+
+QWaylandDisplayThread::~QWaylandDisplayThread()
+{
+    quit = true;
+    wait();
+}
+
+void QWaylandDisplayThread::run()
+{
+    while (!quit) {
+        if (wl_display_prepare_read(mDisplay) != 0) {
+            // wakeup dispatcher for pending events
+            if (auto *dispatcher = QCoreApplication::eventDispatcher())
+                dispatcher->wakeUp();
+        } else {
+            wl_display_flush(mDisplay);
+            wl_display_cancel_read(mDisplay);
+        }
+
+        usleep(100000);
+    }
+}
+
 struct wl_surface *QWaylandDisplay::createSurface(void *handle)
 {
     struct wl_surface *surface = mCompositor.create_surface();
@@ -145,6 +189,8 @@ QWaylandDisplay::QWaylandDisplay(QWaylandIntegration *waylandIntegration)
 
     mWindowManagerIntegration.reset(new QWaylandWindowManagerIntegration(this));
 
+    mThread = new QWaylandDisplayThread(mDisplay);
+
     forceRoundTrip();
 }
 
@@ -167,8 +213,10 @@ QWaylandDisplay::~QWaylandDisplay(void)
 #if QT_CONFIG(cursor)
     qDeleteAll(mCursorThemesBySize);
 #endif
-    if (mDisplay)
+    if (mDisplay) {
+        delete mThread;
         wl_display_disconnect(mDisplay);
+    }
 }
 
 void QWaylandDisplay::checkError() const
diff --git a/src/client/qwaylanddisplay_p.h b/src/client/qwaylanddisplay_p.h
index 43ccc0a..1cde1e2 100644
--- a/src/client/qwaylanddisplay_p.h
+++ b/src/client/qwaylanddisplay_p.h
@@ -96,6 +96,7 @@ class QWaylandIntegration;
 class QWaylandHardwareIntegration;
 class QWaylandShellSurface;
 class QWaylandCursorTheme;
+class QWaylandDisplayThread;
 
 typedef void (*RegistryListener)(void *data,
                                  struct wl_registry *registry,
@@ -237,6 +238,7 @@ private:
     QVector<QWaylandWindow *> mActiveWindows;
     struct wl_callback *mSyncCallback = nullptr;
     static const wl_callback_listener syncCallbackListener;
+    QWaylandDisplayThread *mThread = nullptr;
 
     void registry_global(uint32_t id, const QString &interface, uint32_t version) override;
     void registry_global_remove(uint32_t id) override;
-- 
2.20.1

