From 92dae8e2bc50c70db8fca7c97e905603f59d65a4 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Mon, 1 Jul 2019 10:37:35 +0800
Subject: [PATCH 4/8] media: capture: linux: Support libv4l2 plugins

Allow using libv4l2 plugins for linux v4l2 capture devices.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 src/3rdparty/chromium/media/capture/BUILD.gn  | 14 +++++
 .../video/linux/v4l2_capture_device_impl.cc   | 53 ++++++++++++++++++-
 .../video/linux/v4l2_capture_device_impl.h    | 11 ++++
 .../video_capture_device_factory_linux.cc     | 27 +++++-----
 src/3rdparty/chromium/media/media_options.gni |  1 +
 5 files changed, 93 insertions(+), 13 deletions(-)

diff --git a/src/3rdparty/chromium/media/capture/BUILD.gn b/src/3rdparty/chromium/media/capture/BUILD.gn
index f9e2ccbb4..60d269e60 100644
--- a/src/3rdparty/chromium/media/capture/BUILD.gn
+++ b/src/3rdparty/chromium/media/capture/BUILD.gn
@@ -2,6 +2,7 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/buildflag_header.gni")
 import("//build/config/features.gni")
 import("//media/media_options.gni")
 import("//testing/test.gni")
@@ -16,6 +17,14 @@ group("capture") {
   ]
 }
 
+buildflag_header("buildflags") {
+  header = "buildflags.h"
+
+  flags = [
+    "USE_LIBV4L2=$use_v4lplugin",
+  ]
+}
+
 # Things needed by //media/capture/mojom/video_capture_types.mojom.
 component("capture_base") {
   defines = [ "CAPTURE_IMPLEMENTATION" ]
@@ -233,6 +242,11 @@ component("capture_lib") {
       "video/linux/video_capture_device_linux.cc",
       "video/linux/video_capture_device_linux.h",
     ]
+    public_deps += [ ":buildflags" ]
+
+    if (use_v4lplugin) {
+      deps += [ "//media/gpu:libv4l2_generate_stubs" ]
+    }
   }
 
   if (is_chromeos) {
diff --git a/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.cc b/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.cc
index c9040f5de..54acdc95c 100644
--- a/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.cc
+++ b/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.cc
@@ -10,19 +10,62 @@
 #include <sys/poll.h>
 #include <unistd.h>
 
+#if BUILDFLAG(USE_LIBV4L2)
+// Auto-generated for dlopen libv4l2 libraries
+#include "media/gpu/v4l2/v4l2_stubs.h"
+#include "third_party/v4l-utils/lib/include/libv4l2.h"
+
+#include "base/files/file_path.h"
+
+using media_gpu_v4l2::kModuleV4l2;
+using media_gpu_v4l2::InitializeStubs;
+using media_gpu_v4l2::StubPathMap;
+
+static const base::FilePath::CharType kV4l2Lib[] =
+    FILE_PATH_LITERAL("/usr/lib/libv4l2.so");
+#endif
+
 namespace media {
 
 V4L2CaptureDeviceImpl::~V4L2CaptureDeviceImpl() = default;
 
+V4L2CaptureDeviceImpl::V4L2CaptureDeviceImpl() {
+#if BUILDFLAG(USE_LIBV4L2)
+  StubPathMap paths;
+  paths[kModuleV4l2].push_back(kV4l2Lib);
+
+  has_libv4l2_ = InitializeStubs(paths);
+#endif
+}
+
 int V4L2CaptureDeviceImpl::open(const char* device_name, int flags) {
-  return ::open(device_name, flags);
+  int fd = ::open64(device_name, flags);
+  if (fd < 0)
+    return fd;
+
+#if BUILDFLAG(USE_LIBV4L2)
+  use_libv4l2_ = false;
+  if (has_libv4l2_ && v4l2_fd_open(fd, V4L2_DISABLE_CONVERSION) != -1) {
+    VLOG(2) << "Using libv4l2 for " << device_name;
+    use_libv4l2_ = true;
+  }
+#endif
+  return fd;
 }
 
 int V4L2CaptureDeviceImpl::close(int fd) {
+#if BUILDFLAG(USE_LIBV4L2)
+  if (use_libv4l2_)
+    return v4l2_close(fd);
+#endif
   return ::close(fd);
 }
 
 int V4L2CaptureDeviceImpl::ioctl(int fd, int request, void* argp) {
+#if BUILDFLAG(USE_LIBV4L2)
+  if (use_libv4l2_)
+    return v4l2_ioctl(fd, request, argp);
+#endif
   return ::ioctl(fd, request, argp);
 }
 
@@ -32,10 +75,18 @@ void* V4L2CaptureDeviceImpl::mmap(void* start,
                                   int flags,
                                   int fd,
                                   off_t offset) {
+#if BUILDFLAG(USE_LIBV4L2)
+  if (use_libv4l2_)
+    return v4l2_mmap(start, length, prot, flags, fd, offset);
+#endif
   return ::mmap(start, length, prot, flags, fd, offset);
 }
 
 int V4L2CaptureDeviceImpl::munmap(void* start, size_t length) {
+#if BUILDFLAG(USE_LIBV4L2)
+  if (use_libv4l2_)
+    return v4l2_munmap(start, length);
+#endif
   return ::munmap(start, length);
 }
 
diff --git a/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.h b/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.h
index 936c8b093..f96c2d434 100644
--- a/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.h
+++ b/src/3rdparty/chromium/media/capture/video/linux/v4l2_capture_device_impl.h
@@ -8,6 +8,7 @@
 #include <poll.h>
 #include <sys/fcntl.h>
 
+#include "media/capture/buildflags.h"
 #include "media/capture/capture_export.h"
 #include "media/capture/video/linux/v4l2_capture_device.h"
 
@@ -17,6 +18,8 @@ namespace media {
 // V4L2 APIs.
 class CAPTURE_EXPORT V4L2CaptureDeviceImpl : public V4L2CaptureDevice {
  public:
+  V4L2CaptureDeviceImpl();
+
   int open(const char* device_name, int flags) override;
   int close(int fd) override;
   int ioctl(int fd, int request, void* argp) override;
@@ -32,6 +35,14 @@ class CAPTURE_EXPORT V4L2CaptureDeviceImpl : public V4L2CaptureDevice {
 
  private:
   ~V4L2CaptureDeviceImpl() override;
+
+#if BUILDFLAG(USE_LIBV4L2)
+  // Has libv4l2.
+  bool has_libv4l2_;
+  // Use libv4l2 when operating |fd|.
+  bool use_libv4l2_;
+#endif
+
 };
 
 }  // namespace media
diff --git a/src/3rdparty/chromium/media/capture/video/linux/video_capture_device_factory_linux.cc b/src/3rdparty/chromium/media/capture/video/linux/video_capture_device_factory_linux.cc
index 99c991201..7f8634f7a 100644
--- a/src/3rdparty/chromium/media/capture/video/linux/video_capture_device_factory_linux.cc
+++ b/src/3rdparty/chromium/media/capture/video/linux/video_capture_device_factory_linux.cc
@@ -174,14 +174,15 @@ VideoCaptureDeviceFactoryLinux::CreateDevice(
   // Test opening the device driver. This is to make sure it is available.
   // We will reopen it again in our worker thread when someone
   // allocates the camera.
-  base::ScopedFD fd(
-      HANDLE_EINTR(open(device_descriptor.device_id.c_str(), O_RDONLY)));
-  if (!fd.is_valid()) {
+  int fd =
+      HANDLE_EINTR(open(device_descriptor.device_id.c_str(), O_RDONLY));
+  if (fd < 0) {
     DLOG(ERROR) << "Cannot open device";
     delete self;
     return std::unique_ptr<VideoCaptureDevice>();
   }
 
+  v4l2_->close(fd);
   return std::unique_ptr<VideoCaptureDevice>(self);
 }
 
@@ -192,9 +193,9 @@ void VideoCaptureDeviceFactoryLinux::GetDeviceDescriptors(
   std::vector<std::string> filepaths;
   device_provider_->GetDeviceIds(&filepaths);
   for (auto& unique_id : filepaths) {
-    const base::ScopedFD fd(
-        HANDLE_EINTR(v4l2_->open(unique_id.c_str(), O_RDONLY)));
-    if (!fd.is_valid()) {
+    const int fd =
+        HANDLE_EINTR(v4l2_->open(unique_id.c_str(), O_RDONLY));
+    if (fd < 0) {
       DLOG(ERROR) << "Couldn't open " << unique_id;
       continue;
     }
@@ -203,10 +204,10 @@ void VideoCaptureDeviceFactoryLinux::GetDeviceDescriptors(
     // capabilities at the same time are memory-to-memory and are skipped, see
     // http://crbug.com/139356.
     v4l2_capability cap;
-    if ((HANDLE_EINTR(v4l2_->ioctl(fd.get(), VIDIOC_QUERYCAP, &cap)) == 0) &&
+    if ((HANDLE_EINTR(v4l2_->ioctl(fd, VIDIOC_QUERYCAP, &cap)) == 0) &&
         (cap.capabilities & V4L2_CAP_VIDEO_CAPTURE &&
          !(cap.capabilities & V4L2_CAP_VIDEO_OUTPUT)) &&
-        HasUsableFormats(fd.get(), cap.capabilities)) {
+        HasUsableFormats(fd, cap.capabilities)) {
       const std::string model_id =
           device_provider_->GetDeviceModelId(unique_id);
       std::string display_name =
@@ -225,6 +226,7 @@ void VideoCaptureDeviceFactoryLinux::GetDeviceDescriptors(
           VideoCaptureApi::LINUX_V4L2_SINGLE_PLANE);
 #endif
     }
+    v4l2_->close(fd);
   }
   // Since JS doesn't have API to get camera facing, we sort the list to make
   // sure apps use the front camera by default.
@@ -238,14 +240,15 @@ void VideoCaptureDeviceFactoryLinux::GetSupportedFormats(
   DCHECK(thread_checker_.CalledOnValidThread());
   if (device.device_id.empty())
     return;
-  base::ScopedFD fd(
-      HANDLE_EINTR(v4l2_->open(device.device_id.c_str(), O_RDONLY)));
-  if (!fd.is_valid())  // Failed to open this device.
+  int fd =
+      HANDLE_EINTR(v4l2_->open(device.device_id.c_str(), O_RDONLY));
+  if (fd < 0)  // Failed to open this device.
     return;
   supported_formats->clear();
 
   DCHECK_NE(device.capture_api, VideoCaptureApi::UNKNOWN);
-  GetSupportedFormatsForV4L2BufferType(fd.get(), supported_formats);
+  GetSupportedFormatsForV4L2BufferType(fd, supported_formats);
+  v4l2_->close(fd);
 }
 
 bool VideoCaptureDeviceFactoryLinux::HasUsableFormats(int fd,
diff --git a/src/3rdparty/chromium/media/media_options.gni b/src/3rdparty/chromium/media/media_options.gni
index 2f97925b3..552cd31b0 100644
--- a/src/3rdparty/chromium/media/media_options.gni
+++ b/src/3rdparty/chromium/media/media_options.gni
@@ -5,6 +5,7 @@
 import("//build/config/chrome_build.gni")
 import("//build/config/chromecast_build.gni")
 import("//build/config/features.gni")
+import("//media/gpu/args.gni")
 import("//testing/libfuzzer/fuzzer_test.gni")
 
 # Do not expand this list without double-checking with OWNERS, this is a list of
-- 
2.20.1

