From 4d569bf8fd82b53a0b003f1d5a017f1a5fbab497 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 6 Dec 2018 18:53:05 +0800
Subject: [PATCH 07/41] gl-renderer: Workaround dmabuf import/attach for mali

Tested on px3se with libmali-utgard-400-r7p0-r3p0-wayland.so, the
mpp + waylandsink works.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 libweston/renderer-gl/gl-renderer-internal.h |  2 ++
 libweston/renderer-gl/gl-renderer.c          | 36 ++++++++++++++++----
 2 files changed, 31 insertions(+), 7 deletions(-)

diff --git a/libweston/renderer-gl/gl-renderer-internal.h b/libweston/renderer-gl/gl-renderer-internal.h
index 00f617a..4c1273e 100644
--- a/libweston/renderer-gl/gl-renderer-internal.h
+++ b/libweston/renderer-gl/gl-renderer-internal.h
@@ -115,6 +115,8 @@ struct gl_renderer {
 
 	bool has_wait_sync;
 	PFNEGLWAITSYNCKHRPROC wait_sync;
+
+	bool is_mali_egl;
 };
 
 static inline struct gl_renderer *
diff --git a/libweston/renderer-gl/gl-renderer.c b/libweston/renderer-gl/gl-renderer.c
index 6c43550..9fb22a6 100644
--- a/libweston/renderer-gl/gl-renderer.c
+++ b/libweston/renderer-gl/gl-renderer.c
@@ -1943,6 +1943,14 @@ import_simple_dmabuf(struct gl_renderer *gr,
 	attribs[atti++] = EGL_LINUX_DRM_FOURCC_EXT;
 	attribs[atti++] = attributes->format;
 
+	/* Old mali needs extra attributes */
+	if (gr->is_mali_egl) {
+		attribs[atti++] = EGL_YUV_COLOR_SPACE_HINT_EXT;
+		attribs[atti++] = EGL_ITU_REC601_EXT;
+		attribs[atti++] = EGL_SAMPLE_RANGE_HINT_EXT;
+		attribs[atti++] = EGL_YUV_NARROW_RANGE_EXT;
+	}
+
 	if (attributes->modifier[0] != DRM_FORMAT_MOD_INVALID) {
 		if (!gr->has_dmabuf_import_modifiers)
 			return NULL;
@@ -2297,7 +2305,7 @@ gl_renderer_query_dmabuf_formats(struct weston_compositor *wc,
 
 	if (!gr->has_dmabuf_import_modifiers ||
 	    !gr->query_dmabuf_formats(gr->egl_display, 0, NULL, &num)) {
-		num = gr->has_gl_texture_rg ? ARRAY_LENGTH(fallback_formats) : 2;
+		num = (gr->has_gl_texture_rg || gr->is_mali_egl) ? ARRAY_LENGTH(fallback_formats) : 2;
 		fallback = true;
 	}
 
@@ -2430,7 +2438,7 @@ dmabuf_is_opaque(struct linux_dmabuf_buffer *dmabuf)
 	return pixel_format_is_opaque(info);
 }
 
-static void
+static int
 gl_renderer_attach_dmabuf(struct weston_surface *surface,
 			  struct weston_buffer *buffer,
 			  struct linux_dmabuf_buffer *dmabuf)
@@ -2444,7 +2452,7 @@ gl_renderer_attach_dmabuf(struct weston_surface *surface,
 	if (!gr->has_dmabuf_import) {
 		linux_dmabuf_buffer_send_server_error(dmabuf,
 				"EGL dmabuf import not supported");
-		return;
+		return -1;
 	}
 
 	buffer->width = dmabuf->attributes.width;
@@ -2478,7 +2486,7 @@ gl_renderer_attach_dmabuf(struct weston_surface *surface,
 	 * Here we release the cache reference which has to be final.
 	 */
 	if (dmabuf->direct_display)
-		return;
+		return -1;
 
 	image = linux_dmabuf_buffer_get_user_data(dmabuf);
 
@@ -2492,7 +2500,7 @@ gl_renderer_attach_dmabuf(struct weston_surface *surface,
 
 	if (!import_known_dmabuf(gr, image)) {
 		linux_dmabuf_buffer_send_server_error(dmabuf, "EGL dmabuf import failed");
-		return;
+		return -1;
 	}
 
 	gs->num_images = image->num_images;
@@ -2508,6 +2516,8 @@ gl_renderer_attach_dmabuf(struct weston_surface *surface,
 	}
 
 	gs->shader = image->shader;
+
+	return 0;
 }
 
 static void
@@ -2547,7 +2557,16 @@ gl_renderer_attach(struct weston_surface *es, struct weston_buffer *buffer)
 	else if (gr->has_bind_display &&
 		 gr->query_buffer(gr->egl_display, (void *)buffer->resource,
 				  EGL_TEXTURE_FORMAT, &format))
+	{
+		/* Prefer attaching as dmabuf for old mali */
+		dmabuf = linux_dmabuf_buffer_get(buffer->resource);
+		if (dmabuf && gr->is_mali_egl) {
+			if (!gl_renderer_attach_dmabuf(es, buffer, dmabuf))
+				return;
+		}
+
 		gl_renderer_attach_egl(es, buffer, format);
+	}
 	else if ((dmabuf = linux_dmabuf_buffer_get(buffer->resource)))
 		gl_renderer_attach_dmabuf(es, buffer, dmabuf);
 	else {
@@ -3063,7 +3082,7 @@ log_egl_info(EGLDisplay egldpy)
 }
 
 static void
-log_gl_info(void)
+log_gl_info(struct gl_renderer *gr)
 {
 	const char *str;
 
@@ -3079,6 +3098,9 @@ log_gl_info(void)
 	str = (char *)glGetString(GL_RENDERER);
 	weston_log("GL renderer: %s\n", str ? str : "(null)");
 
+	if (strstr(str, "mali") || strstr(str, "Mali"))
+		gr->is_mali_egl = 1;
+
 	str = (char *)glGetString(GL_EXTENSIONS);
 	log_extensions("GL extensions", str ? str : "(null)");
 }
@@ -3764,7 +3786,7 @@ gl_renderer_setup(struct weston_compositor *ec, EGLSurface egl_surface)
 		gr->gl_version = GR_GL_VERSION(2, 0);
 	}
 
-	log_gl_info();
+	log_gl_info(gr);
 
 	gr->image_target_texture_2d =
 		(void *) eglGetProcAddress("glEGLImageTargetTexture2DOES");
-- 
2.20.1

