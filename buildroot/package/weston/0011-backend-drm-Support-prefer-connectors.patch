From 52d855ca2bc20c85a01420e6bfe4cb35c8359878 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 23 Jun 2020 10:05:48 +0800
Subject: [PATCH 11/41] backend-drm: Support prefer connectors

Using internal connector as main output by default.

Env "WESTON_DRM_PREFER_EXTERNAL_DUAL":
    Using external connector as main output.

Env "WESTON_DRM_PREFER_EXTERNAL":
    Using external connector as main output, and disable internal
    connector when external connector connected.

Env "WESTON_DRM_PRIMARY":
    Using specified connector as main output.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 desktop-shell/shell.c                |  25 ++-
 libweston/backend-drm/drm-internal.h |  18 ++
 libweston/backend-drm/drm.c          | 248 +++++++++++++++++++++++----
 libweston/backend-drm/kms.c          |  42 ++++-
 libweston/compositor.c               |  40 ++++-
 5 files changed, 328 insertions(+), 45 deletions(-)

diff --git a/desktop-shell/shell.c b/desktop-shell/shell.c
index 9a77479..0908763 100644
--- a/desktop-shell/shell.c
+++ b/desktop-shell/shell.c
@@ -4031,6 +4031,9 @@ shell_fade_done_for_output(struct weston_view_animation *animation, void *data)
 	struct shell_output *shell_output = data;
 	struct desktop_shell *shell = shell_output->shell;
 
+	if (!shell_output->fade.view)
+		return;
+
 	shell_output->fade.animation = NULL;
 	switch (shell_output->fade.type) {
 	case FADE_IN:
@@ -4064,6 +4067,7 @@ shell_fade_create_surface_for_output(struct desktop_shell *shell, struct shell_o
 
 	weston_surface_set_size(surface, shell_output->output->width, shell_output->output->height);
 	weston_view_set_position(view, shell_output->output->x, shell_output->output->y);
+	weston_view_set_output(view, shell_output->output);
 	weston_surface_set_color(surface, 0.0, 0.0, 0.0, 1.0);
 	weston_layer_entry_insert(&compositor->fade_layer.view_list,
 				  &view->layer_link);
@@ -4873,6 +4877,12 @@ handle_output_destroy(struct wl_listener *listener, void *data)
 
 	shell_for_each_layer(shell, shell_output_changed_move_layer, NULL);
 
+	if (output_listener->fade.view) {
+		struct weston_view *view = output_listener->fade.view;
+		output_listener->fade.view = NULL;
+		weston_surface_destroy(view->surface);
+	}
+
 	if (output_listener->panel_surface)
 		wl_list_remove(&output_listener->panel_surface_listener.link);
 	if (output_listener->background_surface)
@@ -4962,12 +4972,25 @@ handle_output_move_layer(struct desktop_shell *shell,
 static void
 handle_output_move(struct wl_listener *listener, void *data)
 {
+	struct weston_output *output = data;
+	struct weston_compositor *compositor = output->compositor;
 	struct desktop_shell *shell;
 
 	shell = container_of(listener, struct desktop_shell,
 			     output_move_listener);
 
-	shell_for_each_layer(shell, handle_output_move_layer, data);
+	if (shell->lock_surface)
+		shell->lock_surface->committed(shell->lock_surface, 0, 0);
+
+	/* Only move normal layers for non-default output */
+	if (output != get_default_output(compositor)) {
+		shell_for_each_layer(shell, handle_output_move_layer, data);
+		return;
+	}
+
+	handle_output_move_layer(shell, &shell->lock_layer, data);
+	handle_output_move_layer(shell, &shell->background_layer, data);
+	handle_output_move_layer(shell, &shell->panel_layer, data);
 }
 
 static void
diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 3de7172..8daadaa 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -125,6 +125,9 @@
 			(DRM_MODE_PICTURE_ASPECT_256_135<<19)
 #endif
 
+/* Min duration between drm outputs update requests, to avoid glith */
+#define DRM_MIN_UPDATE_MS	1000
+#define DRM_UPDATE_FREEZE_MS	60
 
 /**
  * Represents the values of an enum-type KMS property
@@ -233,6 +236,10 @@ enum wdrm_crtc_property {
 	WDRM_CRTC__COUNT
 };
 
+struct drm_head;
+struct drm_backend;
+typedef bool (*drm_head_match_t) (struct drm_backend *, struct drm_head *);
+
 struct drm_backend {
 	struct weston_backend base;
 	struct weston_compositor *compositor;
@@ -248,6 +255,7 @@ struct drm_backend {
 		int fd;
 		char *filename;
 		dev_t devnum;
+		char *syspath;
 	} drm;
 	struct gbm_device *gbm;
 	struct wl_listener session_listener;
@@ -292,6 +300,14 @@ struct drm_backend {
 	bool fb_modifiers;
 
 	struct weston_log_scope *debug;
+
+	struct wl_event_source *hotplug_timer;
+	bool pending_update;
+	int64_t last_update_ms;
+
+	drm_head_match_t *head_matches;
+	struct drm_head *primary_head;
+	struct wl_listener output_create_listener;
 };
 
 struct drm_mode {
@@ -522,6 +538,8 @@ struct drm_output {
 	bool virtual;
 
 	submit_frame_cb virtual_submit_frame;
+
+	bool state_invalid;
 };
 
 static inline struct drm_head *
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index c436853..453ffd3 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -68,6 +68,47 @@
 
 static const char default_seat[] = "seat0";
 
+static inline bool
+drm_head_is_external(struct drm_head *head)
+{
+	switch (head->connector->connector_type) {
+		case DRM_MODE_CONNECTOR_LVDS:
+		case DRM_MODE_CONNECTOR_eDP:
+#ifdef DRM_MODE_CONNECTOR_DSI
+		case DRM_MODE_CONNECTOR_DSI:
+#endif
+			return false;
+		default:
+			return true;
+	}
+};
+
+static void
+drm_backend_update_outputs(struct drm_backend *b)
+{
+	struct weston_output *base, *primary;
+
+	if (!b->primary_head)
+		return;
+
+	primary = b->primary_head->base.output;
+	if (!primary)
+		return;
+
+	/* Reflow earlier outputs */
+	wl_list_for_each(base, &b->compositor->output_list, link) {
+		if (base == primary)
+			break;
+
+		weston_output_move(base, base->x + primary->width, base->y);
+	}
+
+	/* Move primary output to (0,0) */
+	wl_list_remove(&primary->link);
+	wl_list_insert(&b->compositor->output_list, &primary->link);
+	weston_output_move(primary, 0, 0);
+}
+
 static void
 drm_backend_create_faked_zpos(struct drm_backend *b)
 {
@@ -451,10 +492,12 @@ drm_output_repaint(struct weston_output *output_base,
 		   pixman_region32_t *damage,
 		   void *repaint_data)
 {
+	struct drm_backend *b = to_drm_backend(output_base->compositor);
 	struct drm_pending_state *pending_state = repaint_data;
 	struct drm_output *output = to_drm_output(output_base);
 	struct drm_output_state *state = NULL;
 	struct drm_plane_state *scanout_state;
+	struct timespec now;
 
 	assert(!output->virtual);
 
@@ -463,6 +506,13 @@ drm_output_repaint(struct weston_output *output_base,
 
 	assert(!output->state_last);
 
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+	if (timespec_to_msec(&now) < b->last_update_ms + DRM_UPDATE_FREEZE_MS) {
+		weston_compositor_damage_all(b->compositor);
+		usleep(b->compositor->repaint_msec);
+		return 0;
+	}
+
 	/* If planes have been disabled in the core, we might not have
 	 * hit assign_planes at all, so might not have valid output state
 	 * here. */
@@ -488,7 +538,7 @@ drm_output_repaint(struct weston_output *output_base,
 
 err:
 	drm_output_state_free(state);
-	return -1;
+	return 0;
 }
 
 /* Determine the type of vblank synchronization to use for the output.
@@ -709,6 +759,7 @@ drm_output_switch_mode(struct weston_output *output_base, struct weston_mode *mo
 	 *      content.
 	 */
 	b->state_invalid = true;
+	output->state_invalid = true;
 
 	if (b->use_pixman) {
 		drm_output_fini_pixman(output);
@@ -1318,6 +1369,7 @@ drm_output_attach_head(struct weston_output *output_base,
 		       struct weston_head *head_base)
 {
 	struct drm_backend *b = to_drm_backend(output_base->compositor);
+	struct drm_output *output = to_drm_output(output_base);
 
 	if (wl_list_length(&output_base->head_list) >= MAX_CLONED_CONNECTORS)
 		return -1;
@@ -1335,6 +1387,7 @@ drm_output_attach_head(struct weston_output *output_base,
 	 * will not clear the flag before this output is updated?
 	 */
 	b->state_invalid = true;
+	output->state_invalid = true;
 
 	weston_output_schedule_repaint(output_base);
 
@@ -1346,6 +1399,7 @@ drm_output_detach_head(struct weston_output *output_base,
 		       struct weston_head *head_base)
 {
 	struct drm_backend *b = to_drm_backend(output_base->compositor);
+	struct drm_output *output = to_drm_output(output_base);
 
 	if (!output_base->enabled)
 		return;
@@ -1354,6 +1408,7 @@ drm_output_detach_head(struct weston_output *output_base,
 	 * be driven. */
 	/* XXX: Ideally we'd do this per-output, not globally. */
 	b->state_invalid = true;
+	output->state_invalid = true;
 
 	weston_output_schedule_repaint(output_base);
 }
@@ -1711,6 +1766,7 @@ drm_output_fini_crtc(struct drm_output *output)
 
 	/* Force resetting unused CRTCs */
 	b->state_invalid = true;
+	output->state_invalid = true;
 
 	output->crtc_id = 0;
 	output->cursor_plane = NULL;
@@ -1773,6 +1829,8 @@ drm_output_enable(struct weston_output *base)
 				      &output->scanout_plane->base,
 				      &b->compositor->primary_plane);
 
+	output->state_invalid = true;
+
 	weston_log("Output %s (crtc %d) video modes:\n",
 		   output->base.name, output->crtc_id);
 	drm_output_print_modes(output);
@@ -2108,8 +2166,7 @@ drm_head_create(struct drm_backend *backend, uint32_t connector_id,
 	if (drm_head_assign_connector_info(head, connector) < 0)
 		goto err_init;
 
-	if (head->connector->connector_type == DRM_MODE_CONNECTOR_LVDS ||
-	    head->connector->connector_type == DRM_MODE_CONNECTOR_eDP)
+	if (!drm_head_is_external(head))
 		weston_head_set_internal(&head->base);
 
 	if (drm_head_read_current_setup(head, backend) < 0) {
@@ -2195,55 +2252,73 @@ drm_output_create(struct weston_compositor *compositor, const char *name)
 	return &output->base;
 }
 
-static int
-drm_backend_create_heads(struct drm_backend *b, struct udev_device *drm_device)
+static bool
+drm_head_match_primary(struct drm_backend *b, struct drm_head *head)
 {
-	struct drm_head *head;
-	drmModeRes *resources;
-	int i;
-
-	resources = drmModeGetResources(b->drm.fd);
-	if (!resources) {
-		weston_log("drmModeGetResources failed\n");
-		return -1;
-	}
+	const char *buf = getenv("WESTON_DRM_PRIMARY");
+	return buf && !strcmp(buf, head->base.name);
+}
 
-	b->min_width  = resources->min_width;
-	b->max_width  = resources->max_width;
-	b->min_height = resources->min_height;
-	b->max_height = resources->max_height;
+static bool
+drm_head_match_external(struct drm_backend *b, struct drm_head *head)
+{
+	return drm_head_is_external(head);
+}
 
-	for (i = 0; i < resources->count_connectors; i++) {
-		uint32_t connector_id = resources->connectors[i];
+static bool
+drm_head_match_internal(struct drm_backend *b, struct drm_head *head)
+{
+	return !drm_head_is_external(head);
+}
 
-		head = drm_head_create(b, connector_id, drm_device);
-		if (!head) {
-			weston_log("DRM: failed to create head for connector %d.\n",
-				   connector_id);
-		}
-	}
+static bool
+drm_head_match_fallback(struct drm_backend *b, struct drm_head *head)
+{
+	return !b->primary_head;
+}
 
-	drm_backend_update_unused_outputs(b, resources);
+static drm_head_match_t drm_head_matches_default[] = {
+	drm_head_match_primary,
+	drm_head_match_internal,
+	drm_head_match_external,
+	NULL,
+};
 
-	drmModeFreeResources(resources);
+static drm_head_match_t drm_head_matches_external_dual[] = {
+	drm_head_match_primary,
+	drm_head_match_external,
+	drm_head_match_internal,
+	NULL,
+};
 
-	return 0;
-}
+static drm_head_match_t drm_head_matches_external[] = {
+	drm_head_match_primary,
+	drm_head_match_external,
+	drm_head_match_fallback,
+	NULL,
+};
 
-static void
+static int
 drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 {
 	drmModeRes *resources;
 	struct weston_head *base, *next;
 	struct drm_head *head;
+	drm_head_match_t *match = b->head_matches;
+	struct timespec now;
 	int i;
 
 	resources = drmModeGetResources(b->drm.fd);
 	if (!resources) {
 		weston_log("drmModeGetResources failed\n");
-		return;
+		return -1;
 	}
 
+	b->min_width  = resources->min_width;
+	b->max_width  = resources->max_width;
+	b->min_height = resources->min_height;
+	b->max_height = resources->max_height;
+
 	/* collect new connectors that have appeared, e.g. MST */
 	for (i = 0; i < resources->count_connectors; i++) {
 		uint32_t connector_id = resources->connectors[i];
@@ -2284,6 +2359,39 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 	drm_backend_update_unused_outputs(b, resources);
 
 	drmModeFreeResources(resources);
+
+	b->primary_head = NULL;
+
+	wl_list_for_each_safe(base, next,
+			      &b->compositor->head_list, compositor_link)
+		weston_head_set_connection_status(base, false);
+
+	/* Re-connect matched heads and find primary head */
+	while (*match) {
+		wl_list_for_each_safe(base, next,
+				      &b->compositor->head_list,
+				      compositor_link) {
+			head = to_drm_head(base);
+
+			if (head->connector->connection != DRM_MODE_CONNECTED ||
+			    !(*match)(b, head))
+				continue;
+
+			weston_head_set_connection_status(base, true);
+
+			if (!b->primary_head)
+				b->primary_head = head;
+		}
+
+		match++;
+	}
+
+	drm_backend_update_outputs(b);
+
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+	b->last_update_ms = timespec_to_msec(&now);
+
+	return 0;
 }
 
 static enum wdrm_connector_property
@@ -2380,6 +2488,48 @@ udev_event_is_conn_prop_change(struct drm_backend *b,
 	return 1;
 }
 
+static void
+udev_hotplug_event(struct drm_backend *b, struct udev_device *device)
+{
+	struct timespec now;
+	int64_t now_ms, next_ms;
+
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+	now_ms = timespec_to_msec(&now);
+
+	/* Already have a pending request */
+	if (b->pending_update)
+		return;
+
+	next_ms = b->last_update_ms + DRM_MIN_UPDATE_MS;
+	if (next_ms <= now_ms) {
+		/* Long enough to trigger a new request */
+		drm_backend_update_heads(b, device);
+	} else {
+		/* Too close to the last request, schedule a new one */
+		b->pending_update = true;
+		wl_event_source_timer_update(b->hotplug_timer,
+					     next_ms - now_ms);
+	}
+}
+
+static int
+hotplug_timer_handler(void *data)
+{
+	struct drm_backend *b = data;
+	struct udev_device *device;
+	struct udev *udev;
+
+	udev = udev_monitor_get_udev(b->udev_monitor);
+	device = udev_device_new_from_syspath(udev, b->drm.syspath);
+
+	drm_backend_update_heads(b, device);
+	b->pending_update = false;
+
+	udev_device_unref(device);
+	return 0;
+}
+
 static int
 udev_drm_event(int fd, uint32_t mask, void *data)
 {
@@ -2393,7 +2543,7 @@ udev_drm_event(int fd, uint32_t mask, void *data)
 		if (udev_event_is_conn_prop_change(b, event, &conn_id, &prop_id))
 			drm_backend_update_conn_props(b, conn_id, prop_id);
 		else
-			drm_backend_update_heads(b, event);
+			udev_hotplug_event(b, event);
 	}
 
 	udev_device_unref(event);
@@ -2453,6 +2603,10 @@ session_notify(struct wl_listener *listener, void *data)
 		weston_compositor_wake(compositor);
 		weston_compositor_damage_all(compositor);
 		b->state_invalid = true;
+
+		wl_list_for_each(output, &compositor->output_list, base.link)
+			output->state_invalid = true;
+
 		udev_input_enable(&b->input);
 	} else {
 		weston_log("deactivating session\n");
@@ -2814,6 +2968,14 @@ recorder_binding(struct weston_keyboard *keyboard, const struct timespec *time,
 }
 #endif
 
+static void
+output_create_notify(struct wl_listener *listener, void *data)
+{
+	struct drm_backend *b = container_of(listener, struct drm_backend,
+					     output_create_listener);
+
+	drm_backend_update_outputs(b);
+}
 
 static const struct weston_drm_output_api api = {
 	drm_output_set_mode,
@@ -2830,6 +2992,7 @@ drm_backend_create(struct weston_compositor *compositor,
 	struct wl_event_loop *loop;
 	const char *seat_id = default_seat;
 	const char *session_seat;
+	char *buf;
 	int ret;
 
 	session_seat = getenv("XDG_SEAT");
@@ -2845,6 +3008,16 @@ drm_backend_create(struct weston_compositor *compositor,
 	if (b == NULL)
 		return NULL;
 
+	b->head_matches = drm_head_matches_default;
+
+	buf = getenv("WESTON_DRM_PREFER_EXTERNAL");
+	if (buf && buf[0] == '1')
+		b->head_matches = drm_head_matches_external;
+
+	buf = getenv("WESTON_DRM_PREFER_EXTERNAL_DUAL");
+	if (buf && buf[0] == '1')
+		b->head_matches = drm_head_matches_external_dual;
+
 	b->state_invalid = true;
 	b->drm.fd = -1;
 	wl_array_init(&b->unused_crtcs);
@@ -2929,7 +3102,7 @@ drm_backend_create(struct weston_compositor *compositor,
 		goto err_sprite;
 	}
 
-	if (drm_backend_create_heads(b, drm_device) < 0) {
+	if (drm_backend_update_heads(b, drm_device) < 0) {
 		weston_log("Failed to create heads for %s\n", b->drm.filename);
 		goto err_udev_input;
 	}
@@ -2966,6 +3139,13 @@ drm_backend_create(struct weston_compositor *compositor,
 
 	udev_device_unref(drm_device);
 
+	b->hotplug_timer =
+		wl_event_loop_add_timer(loop, hotplug_timer_handler, b);
+
+	b->output_create_listener.notify = output_create_notify;
+	wl_signal_add(&b->compositor->output_created_signal,
+		      &b->output_create_listener);
+
 	weston_compositor_add_debug_binding(compositor, KEY_O,
 					    planes_binding, b);
 	weston_compositor_add_debug_binding(compositor, KEY_C,
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 482f80b..693c045 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -699,6 +699,8 @@ drm_output_apply_state_legacy(struct drm_output_state *state)
 
 	scanout_state =
 		drm_output_state_get_existing_plane(state, scanout_plane);
+	if (!scanout_state || !scanout_state->fb)
+		return 0;
 
 	/* The legacy SetCrtc API doesn't allow us to do scaling, and the
 	 * legacy PageFlip API doesn't allow us to do clipping either. */
@@ -716,7 +718,7 @@ drm_output_apply_state_legacy(struct drm_output_state *state)
 	assert(scanout_state->in_fence_fd == -1);
 
 	mode = to_drm_mode(output->base.current_mode);
-	if (backend->state_invalid ||
+	if (output->state_invalid ||
 	    !scanout_plane->state_cur->fb ||
 	    scanout_plane->state_cur->fb->strides[0] !=
 	    scanout_state->fb->strides[0]) {
@@ -730,6 +732,8 @@ drm_output_apply_state_legacy(struct drm_output_state *state)
 			weston_log("set mode failed: %s\n", strerror(errno));
 			goto err;
 		}
+
+		output->state_invalid = false;
 	}
 
 	pinfo = scanout_state->fb->format;
@@ -938,6 +942,11 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 		*flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
 	}
 
+	if (output->state_invalid) {
+		drm_debug(b, "\t\t\t[atomic] output state invalid, modeset OK\n");
+		*flags |= DRM_MODE_ATOMIC_ALLOW_MODESET;
+	}
+
 	if (state->dpms == WESTON_DPMS_ON) {
 		ret = drm_mode_ensure_blob(b, current_mode);
 		if (ret != 0)
@@ -1040,6 +1049,7 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 	struct drm_output_state *output_state, *tmp;
 	struct drm_plane *plane;
 	drmModeAtomicReq *req = drmModeAtomicAlloc();
+	struct timespec now;
 	uint32_t flags;
 	int ret = 0;
 
@@ -1189,14 +1199,34 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 		goto out;
 	}
 
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+
 	wl_list_for_each_safe(output_state, tmp, &pending_state->output_list,
-			      link)
+			      link) {
+		struct drm_output *output = output_state->output;
+		struct drm_plane *scanout_plane = output->scanout_plane;
+		struct drm_plane_state *scanout_state =
+			drm_output_state_get_existing_plane(output_state,
+							    scanout_plane);
+
+		/* Don't have a new state to apply */
+		if (output_state->dpms == WESTON_DPMS_ON &&
+		    (!scanout_state || !scanout_state->fb))
+			continue;
+
 		drm_output_assign_state(output_state, mode);
+		output->state_invalid = false;
+
+		/* Not gonna receive flip event when dpms off */
+		if (output_state->dpms != WESTON_DPMS_ON)
+			drm_output_update_complete(output,
+						   WP_PRESENTATION_FEEDBACK_KIND_HW_COMPLETION,
+						   now.tv_sec,
+						   now.tv_nsec / 1000);
+	}
 
 	b->state_invalid = false;
 
-	assert(wl_list_empty(&pending_state->output_list));
-
 out:
 	drmModeAtomicFree(req);
 	drm_pending_state_free(pending_state);
@@ -1284,8 +1314,6 @@ drm_pending_state_apply(struct drm_pending_state *pending_state)
 
 	b->state_invalid = false;
 
-	assert(wl_list_empty(&pending_state->output_list));
-
 	drm_pending_state_free(pending_state);
 
 	return 0;
@@ -1334,8 +1362,6 @@ drm_pending_state_apply_sync(struct drm_pending_state *pending_state)
 
 	b->state_invalid = false;
 
-	assert(wl_list_empty(&pending_state->output_list));
-
 	drm_pending_state_free(pending_state);
 
 	return 0;
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 1381705..8534bee 100644
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -98,6 +98,25 @@ weston_compositor_build_view_list(struct weston_compositor *compositor);
 static char *
 weston_output_create_heads_string(struct weston_output *output);
 
+static struct weston_layer *
+get_view_layer(struct weston_view *view);
+
+static bool
+weston_compositor_is_static_layer(struct weston_layer *layer)
+{
+	if (!layer)
+		return false;
+
+	switch (layer->position) {
+	case WESTON_LAYER_POSITION_BACKGROUND:
+	case WESTON_LAYER_POSITION_UI:
+	case WESTON_LAYER_POSITION_FADE:
+		return true;
+	default:
+		return false;
+	}
+}
+
 /** Send wl_output events for mode and scale changes
  *
  * \param head Send on all resources bound to this head.
@@ -1265,6 +1284,20 @@ weston_view_assign_output(struct weston_view *ev)
 	uint32_t max, area, mask;
 	pixman_box32_t *e;
 
+	/* The static views should bind to the specific output */
+	if (weston_compositor_is_static_layer(get_view_layer(ev))) {
+		if (!ev->output)
+			return;
+
+		ev->output_mask |= 1u << ev->output->id;
+
+		if (ev->output->destroying)
+			weston_view_set_output(ev, NULL);
+
+		weston_surface_assign_output(ev->surface);
+		return;
+	}
+
 	new_output = NULL;
 	max = 0;
 	mask = 0;
@@ -2725,12 +2758,14 @@ weston_output_repaint(struct weston_output *output, void *repaint_data)
 	if (output->dirty)
 		weston_output_update_matrix(output);
 
+	output->repaint_needed = false;
 	r = output->repaint(output, &output_damage, repaint_data);
 
 	pixman_region32_fini(&output_damage);
 
-	output->repaint_needed = false;
-	if (r == 0)
+	if (output->repaint_needed)
+		output->repaint_status = REPAINT_SCHEDULED;
+	else if (r == 0)
 		output->repaint_status = REPAINT_AWAITING_COMPLETION;
 
 	weston_compositor_repick(ec);
@@ -5987,6 +6022,7 @@ weston_compositor_remove_output(struct weston_output *output)
 	assert(output->destroying);
 	assert(output->enabled);
 
+	weston_compositor_build_view_list(compositor);
 	wl_list_for_each(view, &compositor->view_list, link) {
 		if (view->output_mask & (1u << output->id))
 			weston_view_assign_output(view);
-- 
2.20.1

