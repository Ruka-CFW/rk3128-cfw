From 67340a42b231d61a4240b4dcd1b7e41bd04f7992 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 3 Jul 2020 12:37:37 +0800
Subject: [PATCH 14/41] backend-drm: Support controlling output dynamically

Use config file to control output's rotation/mode/off/freeze/display
rectangle.

Default config file is "/tmp/.weston_drm.conf", can override with
"WESTON_DRM_CONFIG" environment.

Supported configs format is "output:<output name>:<config>", for
example:
echo "output:DSI-1:off" >> /tmp/.weston_drm.conf
echo "output:eDP-1:freeze" >> /tmp/.weston_drm.conf
echo "output:all:rotate90" >> /tmp/.weston_drm.conf
echo "output:all:rect=<100,20,1636,2068>" >> /tmp/.weston_drm.conf
echo "output:HDMI-A-1:mode=800x600" >> /tmp/.weston_drm.conf

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 desktop-shell/shell.c                |  44 ++++++-
 include/libweston/libweston.h        |   1 +
 libweston/backend-drm/drm-internal.h |  17 +++
 libweston/backend-drm/drm.c          | 179 ++++++++++++++++++++++++++-
 libweston/backend-drm/modes.c        |   6 +-
 libweston/compositor.c               |  18 +++
 6 files changed, 260 insertions(+), 5 deletions(-)

diff --git a/desktop-shell/shell.c b/desktop-shell/shell.c
index 27eb99f..159871e 100644
--- a/desktop-shell/shell.c
+++ b/desktop-shell/shell.c
@@ -4909,6 +4909,41 @@ shell_resize_surface_to_output(struct desktop_shell *shell,
 					output->height);
 }
 
+static void
+handle_output_resize_layer(struct desktop_shell *shell,
+			   struct weston_layer *layer, void *data)
+{
+	struct weston_output *output = data;
+	struct weston_view *view;
+
+	wl_list_for_each(view, &layer->view_list.link, layer_link.link) {
+		struct weston_desktop_surface *desktop_surface;
+		struct shell_surface *shsurf;
+		bool dirty = false;
+
+		if (view->output != output)
+			continue;
+
+		shsurf = get_shell_surface(view->surface);
+		if (!shsurf)
+			continue;
+
+		desktop_surface = shsurf->desktop_surface;
+		if (weston_desktop_surface_get_fullscreen(desktop_surface)) {
+			set_fullscreen(shsurf, true, NULL);
+			dirty = true;
+		}
+		if (weston_desktop_surface_get_maximized(desktop_surface)) {
+			set_maximized(shsurf, true);
+			dirty = true;
+		}
+
+		if (dirty) {
+			weston_view_geometry_dirty(view);
+			weston_surface_damage(view->surface);
+		}
+	}
+}
 
 static void
 handle_output_resized(struct wl_listener *listener, void *data)
@@ -4918,8 +4953,13 @@ handle_output_resized(struct wl_listener *listener, void *data)
 	struct weston_output *output = (struct weston_output *)data;
 	struct shell_output *sh_output = find_shell_output_from_weston_output(shell, output);
 
+	if (shell->lock_surface)
+		shell->lock_surface->committed(shell->lock_surface, 0, 0);
+
 	shell_resize_surface_to_output(shell, sh_output->background_surface, output);
 	shell_resize_surface_to_output(shell, sh_output->panel_surface, output);
+
+	shell_for_each_layer(shell, handle_output_resize_layer, data);
 }
 
 static void
@@ -4968,7 +5008,9 @@ handle_output_move_layer(struct desktop_shell *shell,
 
 		x = view->geometry.x + output->move_x;
 		y = view->geometry.y + output->move_y;
-		weston_view_set_position(view, x, y);
+
+		if (pixman_region32_contains_point(&output->region, x, y, NULL))
+			weston_view_set_position(view, x, y);
 	}
 }
 
diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index 972d23f..7a73957 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -352,6 +352,7 @@ struct weston_output {
 			    struct weston_head *head);
 
 	bool unavailable;
+	bool freezing;
 };
 
 enum weston_pointer_motion_mask {
diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 1e163c3..080ed75 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -129,6 +129,10 @@
 #define DRM_MIN_UPDATE_MS	1000
 #define DRM_UPDATE_FREEZE_MS	60
 
+#define WESTON_DRM_CONFIG_FILE	"/tmp/.weston_drm.conf"
+#define DRM_CONFIG_UPDATE_MS	100
+#define DRM_ROTATE_FREEZE_MS	500
+
 /**
  * Represents the values of an enum-type KMS property
  */
@@ -323,6 +327,9 @@ struct drm_backend {
 	int virtual_height;
 
 	bool mirror_mode;
+
+	struct wl_event_source *config_timer;
+	struct stat config_stat;
 };
 
 struct drm_mode {
@@ -564,6 +571,9 @@ struct drm_output {
 	bool is_mirror;
 
 	pixman_box32_t plane_bounds;
+
+	uint32_t original_transform;
+	int64_t last_rotate_ms;
 };
 
 static inline struct drm_head *
@@ -647,6 +657,13 @@ drm_mode_list_destroy(struct drm_backend *backend, struct wl_list *mode_list);
 void
 drm_output_print_modes(struct drm_output *output);
 
+struct drm_mode *
+drm_output_choose_initial_mode(struct drm_backend *backend,
+			       struct drm_output *output,
+			       enum weston_drm_backend_output_mode mode,
+			       const char *modeline,
+			       const drmModeModeInfo *current_mode);
+
 int
 drm_output_set_mode(struct weston_output *base,
 		    enum weston_drm_backend_output_mode mode,
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 89d33ca..690ba6a 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -40,6 +40,7 @@
 #include <linux/vt.h>
 #include <assert.h>
 #include <sys/mman.h>
+#include <sys/stat.h>
 #include <time.h>
 
 #include <xf86drm.h>
@@ -514,6 +515,12 @@ drm_output_update_complete(struct drm_output *output, uint32_t flags,
 		return;
 	}
 
+	if (!sec && !usec) {
+		weston_output_finish_frame(&output->base, NULL,
+					   WP_PRESENTATION_FEEDBACK_INVALID);
+		return;
+	}
+
 	ts.tv_sec = sec;
 	ts.tv_nsec = usec * 1000;
 	weston_output_finish_frame(&output->base, &ts, flags);
@@ -768,6 +775,7 @@ drm_output_repaint(struct weston_output *output_base,
 	struct drm_output_state *state = NULL;
 	struct drm_plane_state *scanout_state;
 	struct timespec now;
+	int64_t now_ms;
 
 	assert(!output->virtual);
 
@@ -777,7 +785,10 @@ drm_output_repaint(struct weston_output *output_base,
 	assert(!output->state_last);
 
 	weston_compositor_read_presentation_clock(b->compositor, &now);
-	if (timespec_to_msec(&now) < b->last_update_ms + DRM_UPDATE_FREEZE_MS) {
+	now_ms = timespec_to_msec(&now);
+
+	if (now_ms < b->last_update_ms + DRM_UPDATE_FREEZE_MS ||
+	    now_ms < output->last_rotate_ms + DRM_ROTATE_FREEZE_MS) {
 		weston_compositor_damage_all(b->compositor);
 		usleep(b->compositor->repaint_msec);
 		return 0;
@@ -2104,8 +2115,13 @@ drm_output_enable(struct weston_output *base)
 				      &output->scanout_plane->base,
 				      &b->compositor->primary_plane);
 
+	output->original_transform = output->base.transform;
+
 	output->state_invalid = true;
 
+	/* Force reload config */
+	memset(&b->config_stat, 0, sizeof(b->config_stat));
+
 	weston_log("Output %s (crtc %d) video modes:\n",
 		   output->base.name, output->crtc_id);
 	drm_output_print_modes(output);
@@ -3258,6 +3274,163 @@ static const struct weston_drm_output_api api = {
 	drm_output_set_seat,
 };
 
+static void
+drm_output_rotate(struct drm_output *output, int rotate)
+{
+	struct drm_backend *b = to_drm_backend(output->base.compositor);
+	uint32_t transform = output->original_transform;
+	struct timespec now;
+
+	/* Hacky way to rotate transform */
+	transform = (transform / 4) * 4 + (transform + rotate) % 4;
+
+	if (output->base.transform == transform)
+		return;
+
+	/* Freeze output when rotating */
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+	output->last_rotate_ms = timespec_to_msec(&now);
+
+	weston_output_set_transform(&output->base, transform);
+}
+
+static void
+drm_output_modeset(struct drm_output *output, const char *modeline)
+{
+	struct drm_backend *b = to_drm_backend(output->base.compositor);
+	struct drm_head *head =
+		to_drm_head(weston_output_get_first_head(&output->base));
+	struct drm_mode *mode;
+	struct timespec now;
+
+	/* Unable to switch mode, let's retry later */
+	if (output->page_flip_pending || output->atomic_complete_pending) {
+		memset(&b->config_stat, 0, sizeof(b->config_stat));
+		return;
+	}
+
+	mode = drm_output_choose_initial_mode(b, output,
+					      WESTON_DRM_BACKEND_OUTPUT_PREFERRED,
+					      modeline,
+					      &head->inherited_mode);
+
+	weston_output_mode_set_native(&output->base, &mode->base,
+				      output->base.current_scale);
+	weston_output_damage(&output->base);
+
+	mode = to_drm_mode(output->base.current_mode);
+
+	weston_log("Output %s changed to %dx%d@%d for mode(%s)\n",
+		   output->base.name,
+		   mode->mode_info.hdisplay, mode->mode_info.vdisplay,
+		   mode->mode_info.vrefresh,
+		   modeline);
+
+	weston_compositor_read_presentation_clock(b->compositor, &now);
+	b->last_update_ms = timespec_to_msec(&now);
+}
+
+static void
+config_handle_output(struct drm_backend *b, const char *name,
+		     const char *config)
+{
+	struct drm_output *output;
+	bool is_all = !strcmp(name, "all");
+
+	wl_list_for_each(output, &b->compositor->output_list, base.link) {
+		if (!is_all && strcmp(name, output->base.name))
+			continue;
+
+		if (!strncmp(config, "rotate", strlen("rotate"))) {
+			int rotate = atoi(config + strlen("rotate")) / 90;
+			drm_output_rotate(output, rotate);
+		} else if (!strncmp(config, "mode=", strlen("mode="))) {
+			drm_output_modeset(output, config + strlen("mode="));
+		} else if (!strcmp(config, "freeze")) {
+			output->base.freezing = true;
+		} else if (!strcmp(config, "off")) {
+			output->base.freezing = true;
+			if (!output->virtual)
+				drm_set_dpms(&output->base, WESTON_DPMS_OFF);
+		} else if (!strcmp(config, "unfreeze") ||
+			   !strcmp(config, "on")) {
+			if (!output->base.freezing)
+				continue;
+
+			output->base.freezing = false;
+
+			if (!output->virtual)
+				drm_set_dpms(&output->base, WESTON_DPMS_ON);
+
+			drm_output_update_complete(output, 0, 0, 0);
+			output->page_flip_pending = false;
+			output->atomic_complete_pending = false;
+
+			weston_output_damage(&output->base);
+		} else if (!strncmp(config, "rect", strlen("rect"))) {
+			int x1, y1, x2, y2, ret;
+
+			ret = sscanf(config, "rect=<%d,%d,%d,%d>",
+				     &x1, &y1, &x2, &y2);
+			if (ret != 4)
+				continue;
+
+			output->plane_bounds.x1 = x1;
+			output->plane_bounds.y1 = y1;
+			output->plane_bounds.x2 = x2;
+			output->plane_bounds.y2 = y2;
+			weston_output_schedule_repaint(&output->base);
+		}
+	}
+}
+
+static int
+config_timer_handler(void *data)
+{
+#define MAX_CONF_LEN 32
+#define _STR(x) #x
+#define STR(x) _STR(x)
+
+	struct drm_backend *b = data;
+	struct stat st;
+	char type[MAX_CONF_LEN], key[MAX_CONF_LEN], value[MAX_CONF_LEN];
+	const char *config_file;
+	FILE *conf_fp;
+
+	wl_event_source_timer_update(b->config_timer, DRM_CONFIG_UPDATE_MS);
+
+	config_file = getenv("WESTON_DRM_CONFIG");
+	if (!config_file)
+		config_file = WESTON_DRM_CONFIG_FILE;
+
+	if (stat(config_file, &st) < 0)
+		return 0;
+
+	if (st.st_mtime && !memcmp(&st, &b->config_stat, sizeof(st)))
+		return 0;
+
+	b->config_stat = st;
+
+	conf_fp = fopen(config_file, "r");
+	if (!conf_fp)
+		return 0;
+
+	/**
+	 * Parse configs, formated with <type>:<key>:<value>
+	 * For example: "output:all:rotate90"
+	 */
+	while (3 == fscanf(conf_fp,
+			   "%" STR(MAX_CONF_LEN) "[^:]:"
+			   "%" STR(MAX_CONF_LEN) "[^:]:"
+			   "%" STR(MAX_CONF_LEN) "s ", type, key, value)) {
+		if (!strcmp(type, "output"))
+			config_handle_output(b, key, value);
+	}
+
+	fclose(conf_fp);
+	return 0;
+}
+
 static struct drm_backend *
 drm_backend_create(struct weston_compositor *compositor,
 		   struct weston_drm_backend_config *config)
@@ -3476,6 +3649,10 @@ drm_backend_create(struct weston_compositor *compositor,
 		goto err_udev_monitor;
 	}
 
+	b->config_timer =
+		wl_event_loop_add_timer(loop, config_timer_handler, b);
+	config_timer_handler(b);
+
 	return b;
 
 err_udev_monitor:
diff --git a/libweston/backend-drm/modes.c b/libweston/backend-drm/modes.c
index cadeb3b..f7a17de 100644
--- a/libweston/backend-drm/modes.c
+++ b/libweston/backend-drm/modes.c
@@ -538,7 +538,7 @@ update_head_from_connector(struct drm_head *head,
  * @param current_mode Mode currently being displayed on this output
  * @returns A mode from the output's mode list, or NULL if none available
  */
-static struct drm_mode *
+struct drm_mode *
 drm_output_choose_initial_mode(struct drm_backend *backend,
 			       struct drm_output *output,
 			       enum weston_drm_backend_output_mode mode,
@@ -591,8 +591,8 @@ drm_output_choose_initial_mode(struct drm_backend *backend,
 	}
 
 	wl_list_for_each_reverse(drm_mode, &output->base.mode_list, base.link) {
-		if (width == drm_mode->base.width &&
-		    height == drm_mode->base.height &&
+		if (width == drm_mode->mode_info.hdisplay &&
+		    height == drm_mode->mode_info.vdisplay &&
 		    (refresh == 0 || refresh == drm_mode->mode_info.vrefresh)) {
 			if (!backend->aspect_ratio_supported ||
 			    aspect_ratio == drm_mode->base.aspect_ratio)
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 78b16d4..5078966 100644
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -2790,6 +2790,11 @@ weston_output_repaint(struct weston_output *output, void *repaint_data)
 static void
 weston_output_schedule_repaint_reset(struct weston_output *output)
 {
+	if (output->idle_repaint_source) {
+		wl_event_source_remove(output->idle_repaint_source);
+		output->idle_repaint_source = NULL;
+	}
+
 	output->repaint_status = REPAINT_NOT_SCHEDULED;
 	TL_POINT(output->compositor, "core_repaint_exit_loop",
 		 TLP_OUTPUT(output), TLP_END);
@@ -2803,6 +2808,11 @@ weston_output_maybe_repaint(struct weston_output *output, struct timespec *now,
 	int ret = 0;
 	int64_t msec_to_repaint;
 
+	/* If we're sleeping, drop the repaint machinery entirely; we will
+	 * explicitly repaint it when we come back. */
+	if (output->freezing)
+		goto err;
+
 	/* We're not ready yet; come back to make a decision later. */
 	if (output->repaint_status != REPAINT_SCHEDULED)
 		return ret;
@@ -6091,12 +6101,15 @@ weston_output_set_transform(struct weston_output *output,
 	int mid_x, mid_y;
 	struct weston_head *head;
 	int ver;
+	int old_width;
 
 	if (!output->enabled && output->transform == UINT32_MAX) {
 		output->transform = transform;
 		return;
 	}
 
+	old_width = output->width;
+
 	weston_output_transform_scale_init(output, transform, output->scale);
 
 	pixman_region32_init(&old_region);
@@ -6104,6 +6117,11 @@ weston_output_set_transform(struct weston_output *output,
 
 	weston_output_init_geometry(output, output->x, output->y);
 
+	weston_compositor_reflow_outputs(output->compositor, output,
+					 output->width - old_width);
+	wl_signal_emit(&output->compositor->output_resized_signal,
+		       output);
+
 	output->dirty = 1;
 
 	/* Notify clients of the change for output transform. */
-- 
2.20.1

