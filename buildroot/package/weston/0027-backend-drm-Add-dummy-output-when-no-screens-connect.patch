From 61c38a0d4ee0554f653e4c6e8ce7eea2191ab8ab Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Thu, 12 Nov 2020 16:59:50 +0800
Subject: [PATCH 27/41] backend-drm: Add dummy output when no screens connected

Some clients are not expecting no screens, add a dummy output for them.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 desktop-shell/shell.c                |   4 -
 libweston/backend-drm/drm-internal.h |   6 +
 libweston/backend-drm/drm.c          | 210 ++++++++++++++++++++++++++-
 libweston/backend-drm/kms.c          |   2 +
 4 files changed, 214 insertions(+), 8 deletions(-)

diff --git a/desktop-shell/shell.c b/desktop-shell/shell.c
index e715ede..190a303 100644
--- a/desktop-shell/shell.c
+++ b/desktop-shell/shell.c
@@ -4848,10 +4848,6 @@ shell_reposition_view_on_output_change(struct weston_view *view)
 	shsurf = get_shell_surface(view->surface);
 	if (!shsurf)
 		return;
-
-	shsurf->saved_position_valid = false;
-	set_maximized(shsurf, false);
-	set_fullscreen(shsurf, false, NULL);
 }
 
 void
diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 080ed75..0500abb 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -128,6 +128,7 @@
 /* Min duration between drm outputs update requests, to avoid glith */
 #define DRM_MIN_UPDATE_MS	1000
 #define DRM_UPDATE_FREEZE_MS	60
+#define DRM_RESIZE_FREEZE_MS	600
 
 #define WESTON_DRM_CONFIG_FILE	"/tmp/.weston_drm.conf"
 #define DRM_CONFIG_UPDATE_MS	100
@@ -319,6 +320,8 @@ struct drm_backend {
 	bool pending_update;
 	int64_t last_update_ms;
 
+	int64_t last_resize_ms;
+
 	drm_head_match_t *head_matches;
 	struct drm_head *primary_head;
 	struct wl_listener output_create_listener;
@@ -330,6 +333,9 @@ struct drm_backend {
 
 	struct wl_event_source *config_timer;
 	struct stat config_stat;
+
+	struct weston_output *dummy_output;
+	struct drm_head *dummy_head;
 };
 
 struct drm_mode {
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 49d21a8..0f65188 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -207,8 +207,14 @@ drm_backend_update_outputs(struct drm_backend *b)
 	struct weston_output *base, *primary;
 	bool changed = false;
 
-	if (!b->primary_head)
+	if (!b->primary_head) {
+		if (!b->dummy_output->enabled)
+			weston_output_enable(b->dummy_output);
 		return;
+	} else {
+		if (b->dummy_output->enabled)
+			weston_output_disable(b->dummy_output);
+	}
 
 	primary = b->primary_head->base.output;
 	if (!primary)
@@ -788,9 +794,16 @@ drm_output_repaint(struct weston_output *output_base,
 	now_ms = timespec_to_msec(&now);
 
 	if (now_ms < b->last_update_ms + DRM_UPDATE_FREEZE_MS ||
+	    now_ms < b->last_resize_ms + DRM_RESIZE_FREEZE_MS ||
 	    now_ms < output->last_rotate_ms + DRM_ROTATE_FREEZE_MS) {
-		weston_compositor_damage_all(b->compositor);
-		usleep(b->compositor->repaint_msec);
+		/* Resize fullscreen/maxmium views(not always success) */
+		if (now_ms < b->last_resize_ms + DRM_RESIZE_FREEZE_MS)
+			wl_signal_emit(&b->compositor->output_resized_signal,
+				       output);
+
+		weston_output_damage(&output->base);
+		weston_output_finish_frame(output_base, NULL,
+					   WP_PRESENTATION_FEEDBACK_INVALID);
 		return 0;
 	}
 
@@ -2488,12 +2501,16 @@ drm_head_destroy(struct drm_head *head)
 {
 	weston_head_release(&head->base);
 
+	if (!head->connector_id)
+		goto out;
+
 	drm_property_info_free(head->props_conn, WDRM_CONNECTOR__COUNT);
 	drmModeFreeConnector(head->connector);
 
 	if (head->backlight)
 		backlight_destroy(head->backlight);
 
+out:
 	free(head);
 }
 
@@ -2594,7 +2611,7 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 {
 	drmModeRes *resources;
 	struct weston_head *base, *next;
-	struct drm_head *head;
+	struct drm_head *head, *old_primary_head;
 	drm_head_match_t *match = b->head_matches;
 	struct timespec now;
 	int i;
@@ -2631,6 +2648,8 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 		bool removed = true;
 
 		head = to_drm_head(base);
+		if (!head->connector_id)
+			continue;
 
 		for (i = 0; i < resources->count_connectors; i++) {
 			if (resources->connectors[i] == head->connector_id) {
@@ -2651,6 +2670,7 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 
 	drmModeFreeResources(resources);
 
+	old_primary_head = b->primary_head;
 	b->primary_head = NULL;
 
 	wl_list_for_each_safe(base, next,
@@ -2663,6 +2683,8 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 				      &b->compositor->head_list,
 				      compositor_link) {
 			head = to_drm_head(base);
+			if (!head->connector_id)
+				continue;
 
 			if (head->connector->connection != DRM_MODE_CONNECTED ||
 			    !(*match)(b, head))
@@ -2677,11 +2699,17 @@ drm_backend_update_heads(struct drm_backend *b, struct udev_device *drm_device)
 		match++;
 	}
 
+	weston_head_set_connection_status(&b->dummy_head->base,
+					  !b->primary_head);
 	drm_backend_update_outputs(b);
 
 	weston_compositor_read_presentation_clock(b->compositor, &now);
 	b->last_update_ms = timespec_to_msec(&now);
 
+	/* Assume primary output's size changed */
+	if (b->primary_head != old_primary_head)
+		b->last_resize_ms = b->last_update_ms;
+
 	return 0;
 }
 
@@ -2848,6 +2876,8 @@ drm_destroy(struct weston_compositor *ec)
 	struct drm_backend *b = to_drm_backend(ec);
 	struct weston_head *base, *next;
 
+	weston_output_destroy(b->dummy_output);
+
 	udev_input_destroy(&b->input);
 
 	wl_event_source_remove(b->udev_drm_source);
@@ -3455,6 +3485,171 @@ config_timer_handler(void *data)
 	return 0;
 }
 
+static int
+drm_dummy_output_start_repaint_loop(struct weston_output *output_base)
+{
+	weston_output_finish_frame(output_base, NULL,
+				   WP_PRESENTATION_FEEDBACK_INVALID);
+
+	return 0;
+}
+
+static int
+drm_dummy_output_repaint(struct weston_output *output_base,
+			   pixman_region32_t *damage,
+			   void *repaint_data)
+{
+	struct drm_backend *b = to_drm_backend(output_base->compositor);
+
+	if (b->use_pixman)
+		return -1;
+
+	/* Switch GL output context to avoid corruption */
+	output_base->compositor->renderer->repaint_output(output_base, damage);
+	return -1;
+}
+
+static int
+drm_dummy_output_enable(struct weston_output *output_base)
+{
+	struct drm_backend *b = to_drm_backend(output_base->compositor);
+	struct drm_output *output = to_drm_output(output_base);
+
+	if (b->use_pixman)
+		return 0;
+
+	return drm_output_init_egl(output, b);
+}
+
+static int
+drm_dummy_output_disable(struct weston_output *output_base)
+{
+	struct drm_backend *b = to_drm_backend(output_base->compositor);
+	struct drm_output *output = to_drm_output(output_base);
+
+	if (!b->use_pixman)
+		drm_output_fini_egl(output);
+
+	return 0;
+}
+
+static void
+drm_dummy_output_destroy(struct weston_output *output_base)
+{
+	struct drm_output *output = to_drm_output(output_base);
+	struct drm_plane *plane = output->scanout_plane;
+	struct weston_mode *mode, *next;
+
+	if (output->base.enabled)
+		drm_dummy_output_disable(&output->base);
+
+	wl_list_for_each_safe(mode, next, &output_base->mode_list, link) {
+		wl_list_remove(&mode->link);
+		free(mode);
+	}
+
+	drm_plane_state_free(plane->state_cur, true);
+	weston_plane_release(&plane->base);
+	wl_list_remove(&plane->link);
+	free(plane);
+
+	weston_output_release(output_base);
+	free(output);
+}
+
+static struct weston_output *
+drm_dummy_output_create(struct drm_backend *b)
+{
+	struct drm_output *output;
+	struct drm_plane *plane;
+
+	output = zalloc(sizeof *output);
+	if (!output)
+		return NULL;
+
+	weston_output_init(&output->base, b->compositor, "DUMMY");
+
+	output->base.enable = drm_dummy_output_enable;
+	output->base.destroy = drm_dummy_output_destroy;
+	output->base.disable = drm_dummy_output_disable;
+
+	output->base.start_repaint_loop = drm_dummy_output_start_repaint_loop;
+	output->base.repaint = drm_dummy_output_repaint;
+	output->base.set_dpms = NULL;
+	output->base.switch_mode = NULL;
+	output->base.gamma_size = 0;
+	output->base.set_gamma = NULL;
+	output->base.unavailable = true;
+
+	weston_compositor_add_pending_output(&output->base, b->compositor);
+
+	output->gbm_bo_flags = GBM_BO_USE_LINEAR | GBM_BO_USE_RENDERING;
+	output->gbm_format = DRM_FORMAT_XRGB8888;
+
+	plane = zalloc(sizeof(*plane) + sizeof(plane->formats[0]));
+	if (!plane) {
+		weston_output_release(&output->base);
+		free(output);
+		return NULL;
+	}
+
+	plane->type = WDRM_PLANE_TYPE_PRIMARY;
+	plane->backend = b;
+	plane->state_cur = drm_plane_state_alloc(NULL, plane);
+	plane->state_cur->complete = true;
+	plane->formats[0].format = output->gbm_format;
+	plane->count_formats = 1;
+
+	weston_plane_init(&plane->base, b->compositor, 0, 0);
+	wl_list_insert(&b->plane_list, &plane->link);
+
+	output->scanout_plane = plane;
+
+	return &output->base;
+}
+
+int drm_backend_init_dummy(struct drm_backend *b)
+{
+	struct weston_mode *mode;
+
+	b->dummy_output = drm_dummy_output_create(b);
+	if (!b->dummy_output)
+		return -1;
+
+	mode = zalloc(sizeof *mode);
+	if (!mode)
+		goto err;
+
+	mode->flags = WL_OUTPUT_MODE_CURRENT;
+	mode->width = 1920;
+	mode->height = 1080;
+	mode->refresh = 60 * 1000LL;
+
+	wl_list_insert(b->dummy_output->mode_list.prev, &mode->link);
+
+	b->dummy_output->current_mode = mode;
+
+	weston_output_set_scale(b->dummy_output, 1);
+	weston_output_set_transform(b->dummy_output,
+				    WL_OUTPUT_TRANSFORM_NORMAL);
+
+	b->dummy_head = zalloc(sizeof *b->dummy_head);
+	if (!b->dummy_head)
+		goto err;
+
+	weston_head_init(&b->dummy_head->base, "DUMMY");
+	weston_head_set_monitor_strings(&b->dummy_head->base,
+					"DUMMY", "DUMMY", "DUMMY");
+	weston_compositor_add_head(b->compositor, &b->dummy_head->base);
+	weston_output_attach_head(b->dummy_output, &b->dummy_head->base);
+
+	return 0;
+err:
+	drm_dummy_output_destroy(b->dummy_output);
+	b->dummy_output = NULL;
+	return -1;
+}
+
 static struct drm_backend *
 drm_backend_create(struct weston_compositor *compositor,
 		   struct weston_drm_backend_config *config)
@@ -3584,11 +3779,18 @@ drm_backend_create(struct weston_compositor *compositor,
 		goto err_sprite;
 	}
 
+	if (drm_backend_init_dummy(b) < 0) {
+		weston_log("Failed to init dummy output\n");
+		goto err_udev_input;
+	}
+
 	if (drm_backend_update_heads(b, drm_device) < 0) {
 		weston_log("Failed to create heads for %s\n", b->drm.filename);
 		goto err_udev_input;
 	}
 
+	b->last_resize_ms = -1;
+
 	/* 'compute' faked zpos values in case HW doesn't expose any */
 	drm_backend_create_faked_zpos(b);
 
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 227a936..4e16c74 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -1159,6 +1159,8 @@ drm_pending_state_apply_atomic(struct drm_pending_state *pending_state,
 				continue;
 
 			head = to_drm_head(head_base);
+			if (head == b->dummy_head)
+				continue;
 
 			drm_debug(b, "\t\t[atomic] disabling inactive head %s\n",
 				  head_base->name);
-- 
2.20.1

